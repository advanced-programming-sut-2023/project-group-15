Index: src/main/java/org/example/controller/mapMenuController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/controller/mapMenuController.java b/src/main/java/org/example/controller/mapMenuController.java
deleted file mode 100644
--- a/src/main/java/org/example/controller/mapMenuController.java	(revision 654ee3a971821e5edc158f9b7911dce66bfc5f52)
+++ /dev/null	(revision 654ee3a971821e5edc158f9b7911dce66bfc5f52)
@@ -1,63 +0,0 @@
-package org.example.controller;
-import org.example.model.gameData.map;
-import org.example.model.tile;
-
-public class mapMenuController {
-    public mapMenuController() {
-    }
-
-    public void showMap(int x, int y) {
-        tile currentTile = map.getCurrentMap()[x][y];
-        tile[][] mapToShow = new tile[11][11];
-        int xS = x - 5;  // x startpoint
-        int xE = x + 5;  // x endpoint
-        if (xS < 0) {
-            xE += -xS;
-            xS = 0;
-        }
-        if (xE > 199) {
-            xS -= xE - 199;
-            xE = 199;
-        }
-        int yS = y - 5;  // y startpoint
-        int yE = y + 5;  // y endpoint
-        if (yS < 0) {
-            yE += -yS;
-            yS = 0;
-        }
-        if (yE > 199) {
-            yS -= yE - 199;
-            yE = 199;
-        }
-
-        for (int i = xS; i < xE; i++) {
-            for (int j = yS; j < yE; j++) {
-                if (map.getCurrentMap()[i][j].getSoldier() != null) {
-                    System.out.print("S ");
-                    continue;
-                } else if (map.getCurrentMap()[i][j].getBuilding() != null) {
-                    System.out.print("B ");
-                    continue;
-                } else
-                    System.out.print(map.getCurrentMap()[i][j].getLandType().getMapId() + " ");
-            }
-            System.out.println();
-
-        }
-
-
-    }
-
-    private String showDetails(int x , int y) {
-        String answer = "LandType : " ;
-        answer = answer.concat(map.getCurrentMap()[x][y].getLandType().values().toString());
-        if (map.getCurrentMap()[x][y].getBuilding() == null) {
-            //answer = answer.concat("\n" + map.getCurrentMap()[x][y].getBuilding().get().toString());
-        }
-        return answer ;
-    }
-}
-
-
-
-
Index: src/main/java/org/example/controller/governmentController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/controller/governmentController.java b/src/main/java/org/example/controller/governmentController.java
deleted file mode 100644
--- a/src/main/java/org/example/controller/governmentController.java	(revision 654ee3a971821e5edc158f9b7911dce66bfc5f52)
+++ /dev/null	(revision 654ee3a971821e5edc158f9b7911dce66bfc5f52)
@@ -1,4 +0,0 @@
-package org.example.controller;
-
-public class governmentController {
-}
Index: src/main/java/org/example/view/mapMenu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/view/mapMenu.java b/src/main/java/org/example/view/mapMenu.java
deleted file mode 100644
--- a/src/main/java/org/example/view/mapMenu.java	(revision 654ee3a971821e5edc158f9b7911dce66bfc5f52)
+++ /dev/null	(revision 654ee3a971821e5edc158f9b7911dce66bfc5f52)
@@ -1,44 +0,0 @@
-package org.example.view;
-
-import org.example.InputScanner;
-import org.example.Main;
-import org.example.controller.mapMenuController;
-import org.example.model.gameData.map;
-import org.example.view.enums.commands.mapMenuEnum;
-import java.util.regex.Matcher;
-
-public class mapMenu {
-    public void run()
-    {
-        map.setCurrentMap();
-        String command;
-        InputScanner scanner = new InputScanner();
-        Matcher mapMenuMatcher ;
-        while (true)
-        {
-            command = scanner.getScanner().nextLine();
-            if(command.matches("\\s*exit\\s*"))
-                break;
-            else if((mapMenuMatcher = mapMenuEnum.getMatcher(command,mapMenuEnum.SHOW_MAP)) != null)
-                showMap(Integer.parseInt(mapMenuMatcher.group("xCoordinate"))
-                        , Integer.parseInt(mapMenuMatcher.group("yCoordinate")));
-                    //TODO moving on map should be added
-
-
-        }
-
-    }
-    private static void showMap(int x,int y)
-    {
-        mapMenuController controller = new mapMenuController();
-        controller.showMap(x , y);
-
-    }
-
-    private map showDetails(int x , int y)
-    {
-        // TODO : only a tile should be shown
-        return null;
-
-    }
-}
Index: src/main/java/org/example/view/UnitMenu.java
===================================================================
diff --git a/src/main/java/org/example/view/UnitMenu.java b/src/main/java/org/example/view/UnitMenu.java
deleted file mode 100644
--- a/src/main/java/org/example/view/UnitMenu.java	(revision 654ee3a971821e5edc158f9b7911dce66bfc5f52)
+++ /dev/null	(revision 654ee3a971821e5edc158f9b7911dce66bfc5f52)
@@ -1,5 +0,0 @@
-package org.example.view;
-
-public class UnitMenu {
-
-}
Index: src/main/java/org/example/controller/UnitMenuController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.controller;\r\nimport org.example.model.MBC.LauncherUnit;\r\nimport org.example.model.enums.State;\r\nimport org.example.model.User;\r\nimport org.example.model.enums.UnitName;\r\nimport org.example.view.enums.outputs.UnitMenuOutput;\r\n\r\n\r\npublic class UnitMenuController {\r\n    public User currentUser;\r\n    public State state;\r\n    public String type;\r\n    public int x,y;\r\n    public UnitName name;\r\n    private UnitMenuOutput selectUnit(int x, int y){\r\n        //TODO: add code to get informaion from map\r\n       if((name = UnitName.valueOf(type)) != null){\r\n        this.x = y;\r\n        this.y = y;\r\n        return UnitMenuOutput.UNIT_FOUND;\r\n       }\r\n\r\n       else\r\n           return UnitMenuOutput.UNIT_NOT_FOUND;\r\n    }\r\n\r\n    private UnitMenuOutput moveUnit(int x,int y){\r\n        // TODO: add code to verify type of unit\r\n        if(selectUnit(x,y) == null)\r\n            return UnitMenuOutput.UNIT_NOT_FOUND_AND_CANNOT_MOVE;\r\n        else{\r\n            int indexOfType = UnitMenuOutput.valueOf(type).ordinal();\r\n            int deltaX = x - this.x;\r\n            int deltaY = y - this.y;\r\n            if(indexOfType<7)\r\n            {\r\n\r\n               int maxMove = 0;\r\n                if(deltaX > maxMove && deltaY > maxMove)\r\n                    return UnitMenuOutput.OUT_OF_BOUNDS;\r\n\r\n                else {\r\n                    this.x += deltaX;\r\n                    this.y += deltaY;\r\n                    // TODO: add code to move unit in map\r\n                    return UnitMenuOutput.SUCCESSFULL_MOVE;\r\n                }\r\n            }\r\n\r\n            else if(indexOfType > 6 && indexOfType <= 12){\r\n                //TODO: add code to get move\r\n                //its zero for know until complete\r\n                int maxMove = 0;\r\n                if(deltaX > maxMove && deltaY > maxMove)\r\n                    return UnitMenuOutput.OUT_OF_BOUNDS;\r\n\r\n                else {\r\n                    this.x += deltaX;\r\n                    this.y += deltaY;\r\n                    // TODO: add code to move unit in map\r\n                    return UnitMenuOutput.SUCCESSFULL_MOVE;\r\n                }\r\n            }\r\n\r\n            else{\r\n                //TODO: add code to get move\r\n                int maxMove = 0 ;\r\n                if(deltaX > maxMove && deltaY > maxMove)\r\n                    return UnitMenuOutput.OUT_OF_BOUNDS;\r\n\r\n                else {\r\n                    this.x += deltaX;\r\n                    this.y += deltaY;\r\n                    // TODO: add code to move unit in map\r\n                    return UnitMenuOutput.SUCCESSFULL_MOVE;\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    private void setUnit(int x, int y, State state){\r\n        // TODO: add code to get unit from map\r\n\r\n    }\r\n\r\n    private void airAttack(int x,int y){\r\n        // TODO: add code to select unit\r\n\r\n    }\r\n\r\n    private void disbandUnit(){\r\n\r\n    }\r\n\r\n    private void build(){\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/controller/UnitMenuController.java b/src/main/java/org/example/controller/UnitMenuController.java
--- a/src/main/java/org/example/controller/UnitMenuController.java	(revision 654ee3a971821e5edc158f9b7911dce66bfc5f52)
+++ b/src/main/java/org/example/controller/UnitMenuController.java	(date 1682334826133)
@@ -1,5 +1,7 @@
 package org.example.controller;
+import org.example.model.MBC.InfantryUnit;
 import org.example.model.MBC.LauncherUnit;
+import org.example.model.MBC.UnitWallTarget;
 import org.example.model.enums.State;
 import org.example.model.User;
 import org.example.model.enums.UnitName;
@@ -7,16 +9,20 @@
 
 
 public class UnitMenuController {
-    public User currentUser;
+    public LauncherUnit launcherUnit;
+    public InfantryUnit infantryUnit;
+    public UnitWallTarget unitWallTarget;
     public State state;
     public String type;
     public int x,y;
     public UnitName name;
+
     private UnitMenuOutput selectUnit(int x, int y){
         //TODO: add code to get informaion from map
        if((name = UnitName.valueOf(type)) != null){
         this.x = y;
         this.y = y;
+        name = UnitName.valueOf(type);
         return UnitMenuOutput.UNIT_FOUND;
        }
 
@@ -34,8 +40,8 @@
             int deltaY = y - this.y;
             if(indexOfType<7)
             {
-
-               int maxMove = 0;
+               infantryUnit.setMaxMove(name);
+               int maxMove = infantryUnit.getMaxMove();
                 if(deltaX > maxMove && deltaY > maxMove)
                     return UnitMenuOutput.OUT_OF_BOUNDS;
 
@@ -48,9 +54,8 @@
             }
 
             else if(indexOfType > 6 && indexOfType <= 12){
-                //TODO: add code to get move
-                //its zero for know until complete
-                int maxMove = 0;
+                launcherUnit.setMove(name);
+                int maxMove = launcherUnit.getMaxMove();
                 if(deltaX > maxMove && deltaY > maxMove)
                     return UnitMenuOutput.OUT_OF_BOUNDS;
 
@@ -63,8 +68,8 @@
             }
 
             else{
-                //TODO: add code to get move
-                int maxMove = 0 ;
+                unitWallTarget.setMaxMove(name);
+                int maxMove = unitWallTarget.getMaxMove();
                 if(deltaX > maxMove && deltaY > maxMove)
                     return UnitMenuOutput.OUT_OF_BOUNDS;
 
Index: src/main/java/org/example/controller/GameMenuController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.controller;\r\n\r\npublic class GameMenuController {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/controller/GameMenuController.java b/src/main/java/org/example/controller/GameMenuController.java
--- a/src/main/java/org/example/controller/GameMenuController.java	(revision 654ee3a971821e5edc158f9b7911dce66bfc5f52)
+++ b/src/main/java/org/example/controller/GameMenuController.java	(date 1682334826130)
@@ -1,4 +1,43 @@
 package org.example.controller;
 
+import org.example.model.User;
+import org.example.view.enums.outputs.GameMenuOutput;
+
+import java.util.ArrayList;
+
 public class GameMenuController {
+
+    public int foodrate(){
+       return 1;
+    }
+
+    public int taxRate(){
+        return 2;
+    }
+
+    public void setFoodRate(int rate){
+        //return 1;
+    }
+
+    public void setTaxRate(int rate){
+        //TODO: set rate in goverment
+    }
+
+    public void setFearRate(int rate){
+        //TODO: set rate in goverment
+    }
+
+    public void foodList(){
+        //TODO: get list from goverment
+    }
+
+    public int popularity(int rate){
+        return 1;
+    }
+
+   /* public ArrayList factors(){
+        //TODO: get list of factors from goverment
+    }*/
+
+
 }
Index: src/main/java/org/example/controller/MainMenuController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.controller;\r\n\r\npublic class MainMenuController {\r\n    private String username;\r\n    private String password;\r\n    private String nickname;\r\n    private String slogan;\r\n    private String email;\r\n\r\n    public MainMenuController() {\r\n        this.username = null;\r\n        this.password = null;\r\n        this.nickname = null;\r\n        this.slogan = null;\r\n        this.email = null;\r\n    }\r\n\r\n    public String getUsername() {\r\n        return username;\r\n    }\r\n\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n\r\n    public String getNickname() {\r\n        return nickname;\r\n    }\r\n\r\n    public String getSlogan() {\r\n        return slogan;\r\n    }\r\n\r\n    public String getEmail() {\r\n        return email;\r\n    }\r\n\r\n    public void setUsername(String username) {\r\n        this.username = username;\r\n    }\r\n\r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n    }\r\n\r\n    public void setNickname(String nickname) {\r\n        this.nickname = nickname;\r\n    }\r\n\r\n    public void setSlogan(String slogan) {\r\n        this.slogan = slogan;\r\n    }\r\n\r\n    public void setEmail(String email) {\r\n        this.email = email;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/controller/MainMenuController.java b/src/main/java/org/example/controller/MainMenuController.java
--- a/src/main/java/org/example/controller/MainMenuController.java	(revision 654ee3a971821e5edc158f9b7911dce66bfc5f52)
+++ b/src/main/java/org/example/controller/MainMenuController.java	(date 1682334826131)
@@ -6,6 +6,8 @@
     private String nickname;
     private String slogan;
     private String email;
+    private String clipBoard;
+
 
     public MainMenuController() {
         this.username = null;
@@ -13,6 +15,15 @@
         this.nickname = null;
         this.slogan = null;
         this.email = null;
+        this.clipBoard = null;
+    }
+
+    public String getClipBoard() {
+        return clipBoard;
+    }
+
+    public void setClipBoard(String clipBoard) {
+        this.clipBoard = clipBoard;
     }
 
     public String getUsername() {
Index: src/main/java/org/example/controller/SignupMenuController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.controller;\r\n\r\n\r\nimport org.example.view.enums.outputs.SignupMenuOutput;\r\n\r\npublic class SignupMenuController extends MainMenuController{\r\n    public SignupMenuOutput signupUser() {\r\n        if (usernameCheck(this.getUsername())==null) {\r\n            if (passwordCheck(this.getPassword()) == null) {\r\n                if (emailCheck(this.getEmail())==null) {\r\n                    //TODO: doing user signing in ...\r\n                    return null;\r\n                }\r\n                return SignupMenuOutput.INVALID_EMAIL_FORMAT;\r\n            }\r\n            return SignupMenuOutput.INVALID_PASSWORD_FORMAT;\r\n        }\r\n        return SignupMenuOutput.INVALID_USERNAME_FORMAT;\r\n    }\r\n\r\n    public static SignupMenuOutput usernameCheck(String username) {\r\n        if (username.matches(\"^\\\\w+$\")) {\r\n            //TODO: checking other users....\r\n            return null;\r\n        }\r\n        return SignupMenuOutput.INVALID_USERNAME_FORMAT;\r\n    }\r\n\r\n\r\n    public static SignupMenuOutput passwordCheck(String password) {\r\n        if (password.length()>=6) {\r\n            if (password.matches(\"[a-z]+\")) {\r\n                if (password.matches(\"[A-Z]+\")) {\r\n                    if (password.matches(\"\\\\d+\")) {\r\n                        if (password.matches(\"[',!;?$^:\\\\\\\\/`|~&\\\" @#%*{}()\\\\[\\\\]<>_+.\\\\s=-]\")) {\r\n                            return null;\r\n                        }\r\n                        return SignupMenuOutput.ERROR_PASSWORD_NO_SPECIAL_CHARACTER;\r\n                    }\r\n                    return SignupMenuOutput.ERROR_PASSWORD_NO_DIGITS;\r\n                }\r\n                return SignupMenuOutput.ERROR_PASSWORD_NO_CAPITAL_CHARACTER;\r\n            }\r\n            return SignupMenuOutput.ERROR_PASSWORD_NO_SMALL_CHARACTER;\r\n        }\r\n        return SignupMenuOutput.ERROR_PASSWORD_IS_TOO_SHORT;\r\n    }\r\n\r\n    public static SignupMenuOutput emailCheck(String email) {\r\n        if (email.matches(\"[\\\\w.]+@[\\\\w.]+\\\\.[\\\\w.]+\")) {\r\n            //TODO:checking other emails...\r\n            return null;\r\n        }\r\n        return SignupMenuOutput.INVALID_EMAIL_FORMAT;\r\n    }\r\n\r\n    public String generateRandomSlogan() {\r\n        //TODO:\r\n        return null;\r\n    }\r\n\r\n    public String generateRandomPassword() {\r\n        //TODO:\r\n        return null;\r\n    }\r\n\r\n    public void securityQuestion() {\r\n        //TODO:\r\n        return;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/controller/SignupMenuController.java b/src/main/java/org/example/controller/SignupMenuController.java
--- a/src/main/java/org/example/controller/SignupMenuController.java	(revision 654ee3a971821e5edc158f9b7911dce66bfc5f52)
+++ b/src/main/java/org/example/controller/SignupMenuController.java	(date 1682334826132)
@@ -1,33 +1,50 @@
 package org.example.controller;
 
 
+import org.example.InputScanner;
+import org.example.model.User;
 import org.example.view.enums.outputs.SignupMenuOutput;
 
+import java.util.Random;
+
 public class SignupMenuController extends MainMenuController{
-    public SignupMenuOutput signupUser() {
-        if (usernameCheck(this.getUsername())==null) {
-            if (passwordCheck(this.getPassword()) == null) {
-                if (emailCheck(this.getEmail())==null) {
-                    //TODO: doing user signing in ...
-                    return null;
-                }
-                return SignupMenuOutput.INVALID_EMAIL_FORMAT;
-            }
-            return SignupMenuOutput.INVALID_PASSWORD_FORMAT;
+    public SignupMenuOutput signupUserCheck() {
+        SignupMenuOutput status;
+//        if ((status = usernameCheck())!=SignupMenuOutput.CHECKED_SUCCESSFULLY)
+//            return status;
+        if ((status = emailCheck(this.getEmail()))!=SignupMenuOutput.CHECKED_SUCCESSFULLY)
+            return status;
+        if ((status = passwordCheck(this.getPassword()))!=SignupMenuOutput.CHECKED_SUCCESSFULLY)
+            return status;
+        if ((status = nicknameCheck(this.getNickname()))!=SignupMenuOutput.CHECKED_SUCCESSFULLY)
+            return status;
+        return SignupMenuOutput.SECURITY_QUESTION;
+    }
+
+    private SignupMenuOutput nicknameCheck(String nickname) {
+        return nickname==null ? SignupMenuOutput.EMPTY_FIELD : SignupMenuOutput.CHECKED_SUCCESSFULLY;
+    }
+
+    public SignupMenuOutput usernameCheckErrors() {
+        if (this.getUsername() == null) {
+            return SignupMenuOutput.EMPTY_FIELD;
         }
-        return SignupMenuOutput.INVALID_USERNAME_FORMAT;
-    }
-
-    public static SignupMenuOutput usernameCheck(String username) {
-        if (username.matches("^\\w+$")) {
-            //TODO: checking other users....
-            return null;
+        if (this.getUsername().matches("^\\w+$")) {
+            for (User user:User.allUsers) {
+                if (user.getUsername().equals(this.getUsername())) {
+                    return SignupMenuOutput.USERNAME_EXISTS;
+                }
+            }
+            return SignupMenuOutput.CHECKED_SUCCESSFULLY;
         }
         return SignupMenuOutput.INVALID_USERNAME_FORMAT;
     }
 
 
     public static SignupMenuOutput passwordCheck(String password) {
+        if (password==null) {
+            return SignupMenuOutput.EMPTY_FIELD;
+        }
         if (password.length()>=6) {
             if (password.matches("[a-z]+")) {
                 if (password.matches("[A-Z]+")) {
@@ -47,6 +64,9 @@
     }
 
     public static SignupMenuOutput emailCheck(String email) {
+        if (email==null) {
+            return SignupMenuOutput.EMPTY_FIELD;
+        }
         if (email.matches("[\\w.]+@[\\w.]+\\.[\\w.]+")) {
             //TODO:checking other emails...
             return null;
@@ -55,17 +75,51 @@
     }
 
     public String generateRandomSlogan() {
-        //TODO:
+        //TODO: uncompleted method!
         return null;
     }
 
     public String generateRandomPassword() {
-        //TODO:
+        String password = null;
+        //TODO: generating strong password
+        return password;
+    }
+
+    public boolean pickSecurityQuestion(String numOfQuestion) {
+        //for on all questions!
+        //TODO: uncompleted method!
+        return false;
+    }
+    public void usernameSuggestionGenerator() {
+        while (true) {
+            boolean flag = true;
+            Random random = new Random();
+            char randomChar = (char) (random.nextInt(26)+'a');
+            this.setUsername(this.getUsername()+randomChar);
+            for (User user : User.allUsers){
+                if (user.getUsername().equals(this.getUsername())) {
+                    flag = false;
+                    break;
+                }
+            }
+            if (flag)
+                return;
+        }
+    }
+    public SignupMenuOutput suggestingUsername() {
+
         return null;
     }
+    public boolean randomPasswordVerification(String verification) {
+        return verification.equals(this.getClipBoard());
+    }
 
-    public void securityQuestion() {
-        //TODO:
-        return;
+    public void signingsComplete() {
+        User newUser = new User(this.getUsername(), this.getPassword(), this.getNickname(), this.getEmail());
+        if (this.getSlogan()!=null) {
+            newUser.setSlogan(this.getSlogan());
+        }
+        newUser.addUser();
     }
+
 }
Index: src/main/java/org/example/controller/ProfileMenuController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.controller;\r\n\r\nimport org.example.model.User;\r\nimport org.example.view.enums.outputs.ProfileMenuOutput;\r\n\r\n\r\npublic class ProfileMenuController extends LoginMenuController{\r\n    public ProfileMenuOutput changeUsername(String username) {\r\n        if (SignupMenuController.usernameCheck(username)==null) {\r\n            for (User user:User.allUsers) {\r\n                if (user.getUsername().equals(this.getUsername())) {\r\n                    user.setUsername(username);\r\n                    this.setUsername(username);\r\n                    return ProfileMenuOutput.USERNAME_CHANGED_SUCCESSFULLY;\r\n                }\r\n            }\r\n        }\r\n        return ProfileMenuOutput.INVALID_NEW_USERNAME;\r\n    }\r\n\r\n    public ProfileMenuOutput changeNickname(String nickname) {\r\n        User.findUserWithPass(this.getPassword()).setNickname(nickname);\r\n        this.setNickname(nickname);\r\n        return ProfileMenuOutput.NICKNAME_CHANGED_SUCCESSFULLY;\r\n    }\r\n\r\n    public ProfileMenuOutput changePassword(String oldPass,String newPass) {\r\n        if (this.getPassword().equals(oldPass)) {\r\n            if (!oldPass.equals(newPass)) {\r\n                if (SignupMenuController.passwordCheck(newPass)==null) {\r\n                    User.findUserWithPass(oldPass).setPassword(newPass);\r\n                    this.setPassword(newPass);\r\n                    return ProfileMenuOutput.PASSWORD_CHANGED_SUCCESSFULLY;\r\n                }\r\n                return ProfileMenuOutput.INVALID_NEW_PASSWORD;\r\n            }\r\n            return ProfileMenuOutput.NEWPASS_AND_OLDPASS_ARE_EQUALS;\r\n        }\r\n        return ProfileMenuOutput.INVALID_CURRENT_PASSWORD;\r\n    }\r\n\r\n    public ProfileMenuOutput changeEmail(String email) {\r\n        if (SignupMenuController.emailCheck(email)==null) {\r\n            User.findUserWithPass(this.getPassword()).setEmail(email);\r\n            this.setEmail(email);\r\n            return ProfileMenuOutput.EMAIL_CHANGED_SUCCESSFULLY;\r\n        }\r\n        return ProfileMenuOutput.INVALID_NEW_EMAIL;\r\n    }\r\n\r\n    public ProfileMenuOutput changeSlogan(String slogan) {\r\n        User.findUserWithPass(this.getPassword()).setSlogan(slogan);\r\n        this.setSlogan(slogan);\r\n        return ProfileMenuOutput.SLOGAN_CHANGED_SUCCESSFULLY;\r\n    }\r\n\r\n    public ProfileMenuOutput removeSlogan() {\r\n        User.findUserWithPass(this.getPassword()).setSlogan(null);\r\n        this.setSlogan(null);\r\n        return ProfileMenuOutput.SLOGAN_REMOVED_SUCCESSFULLY;\r\n    }\r\n\r\n    public void showUserHighestScore() {\r\n        //TODO: after completing other parts!\r\n    }\r\n\r\n    public void showUserRank() {\r\n        //TODO: after completing other parts!\r\n    }\r\n\r\n    public void showUserSlogan() {\r\n        System.out.println(this.getSlogan());\r\n    }\r\n\r\n    public void showUserProfileDisplay() {\r\n        System.out.println(\"username:\"+this.getUsername());\r\n        StringBuilder password = new StringBuilder(\"*\");\r\n        for (int i=1;i<this.getPassword().length();i++) {\r\n            password.append(\"*\");\r\n        }\r\n        System.out.println(\"password:\"+password);\r\n        System.out.println(\"email:\"+this.getEmail());\r\n        System.out.println(\"nickname:\"+this.getNickname());\r\n        System.out.println(\"slogan:\"+this.getSlogan());\r\n        //TODO:user rank and high score are left..\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/controller/ProfileMenuController.java b/src/main/java/org/example/controller/ProfileMenuController.java
--- a/src/main/java/org/example/controller/ProfileMenuController.java	(revision 654ee3a971821e5edc158f9b7911dce66bfc5f52)
+++ b/src/main/java/org/example/controller/ProfileMenuController.java	(date 1682334826132)
@@ -6,7 +6,7 @@
 
 public class ProfileMenuController extends LoginMenuController{
     public ProfileMenuOutput changeUsername(String username) {
-        if (SignupMenuController.usernameCheck(username)==null) {
+//        if (SignupMenuController.usernameCheck(username)==null) {
             for (User user:User.allUsers) {
                 if (user.getUsername().equals(this.getUsername())) {
                     user.setUsername(username);
@@ -14,7 +14,7 @@
                     return ProfileMenuOutput.USERNAME_CHANGED_SUCCESSFULLY;
                 }
             }
-        }
+//        }
         return ProfileMenuOutput.INVALID_NEW_USERNAME;
     }
 
Index: src/main/java/org/example/controller/LoginMenuController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.controller;\r\n\r\nimport org.example.view.enums.outputs.LoginMenuOutput;\r\n\r\npublic class LoginMenuController extends MainMenuController{\r\n    private boolean stayLoggedInFlag = false;\r\n\r\n    public LoginMenuOutput loginUser() {\r\n        if (checkMatchUsername(this.getUsername())) {\r\n            if (checkUsernameWithPassword(this.getUsername(),this.getPassword())) {\r\n                //TODO: later...\r\n                return LoginMenuOutput.LOGGED_IN_SUCCESSFULY;\r\n            }\r\n            return LoginMenuOutput.USER_AND_PASS_MATCH_ERROR;\r\n        }\r\n        return LoginMenuOutput.USER_DOES_NOT_EXIST;\r\n    }\r\n\r\n    public boolean checkMatchUsername(String username) {\r\n        //TODO:\r\n        return true;\r\n    }\r\n\r\n    public boolean checkUsernameWithPassword(String username,String password) {\r\n        //TODO:\r\n        return true;\r\n    }\r\n\r\n    public boolean checkSecurityQuestion(String answer) {\r\n        //TODO:\r\n        return true;\r\n    }\r\n\r\n    public LoginMenuOutput forgetPassword(String username) {\r\n        //TODO:\r\n        return null;\r\n    }\r\n\r\n    public void logoutUser() {\r\n        //TODO:\r\n        return;\r\n    }\r\n\r\n    public void captcha() {\r\n        //TODO:\r\n        return;\r\n    }\r\n\r\n    public boolean isStayLoggedInFlag() {\r\n        return stayLoggedInFlag;\r\n    }\r\n\r\n    public void setStayLoggedInFlag(boolean stayLoggedInFlag) {\r\n        this.stayLoggedInFlag = stayLoggedInFlag;\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/controller/LoginMenuController.java b/src/main/java/org/example/controller/LoginMenuController.java
--- a/src/main/java/org/example/controller/LoginMenuController.java	(revision 654ee3a971821e5edc158f9b7911dce66bfc5f52)
+++ b/src/main/java/org/example/controller/LoginMenuController.java	(date 1682334826131)
@@ -1,5 +1,6 @@
 package org.example.controller;
 
+import org.example.model.User;
 import org.example.view.enums.outputs.LoginMenuOutput;
 
 public class LoginMenuController extends MainMenuController{
@@ -17,13 +18,22 @@
     }
 
     public boolean checkMatchUsername(String username) {
-        //TODO:
-        return true;
+        for (User user:User.allUsers) {
+            if (user.getUsername().equals(username))
+                return true;
+        }
+        return false;
     }
 
     public boolean checkUsernameWithPassword(String username,String password) {
-        //TODO:
-        return true;
+        for (User user:User.allUsers) {
+            if (user.getUsername().equals(username)) {
+                if (user.getPassword().equals(password)) {
+                    return true;
+                }
+            }
+        }
+        return false;
     }
 
     public boolean checkSecurityQuestion(String answer) {
Index: .idea/jarRepositories.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/jarRepositories.xml b/.idea/jarRepositories.xml
new file mode 100644
--- /dev/null	(date 1682334826125)
+++ b/.idea/jarRepositories.xml	(date 1682334826125)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RemoteRepositoriesConfiguration">
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Central Repository" />
+      <option name="url" value="https://repo.maven.apache.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Maven Central repository" />
+      <option name="url" value="https://repo1.maven.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="jboss.community" />
+      <option name="name" value="JBoss Community repository" />
+      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
+    </remote-repository>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
new file mode 100644
--- /dev/null	(date 1682334826124)
+++ b/.idea/compiler.xml	(date 1682334826124)
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <annotationProcessing>
+      <profile name="Maven default annotation processors profile" enabled="true">
+        <sourceOutputDir name="target/generated-sources/annotations" />
+        <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
+        <outputRelativeToContentRoot value="true" />
+        <module name="project-group-15" />
+      </profile>
+    </annotationProcessing>
+    <bytecodeTargetLevel>
+      <module name="project-group-15" target="19" />
+    </bytecodeTargetLevel>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/encodings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/encodings.xml b/.idea/encodings.xml
new file mode 100644
--- /dev/null	(date 1682334826125)
+++ b/.idea/encodings.xml	(date 1682334826125)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Encoding">
+    <file url="file://$PROJECT_DIR$/src/main/java" charset="UTF-8" />
+    <file url="file://$PROJECT_DIR$/src/main/resources" charset="UTF-8" />
+  </component>
+</project>
\ No newline at end of file
Index: src/main/java/org/example/InputScanner.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example;\r\n\r\nimport java.util.Scanner;\r\n\r\npublic class InputScanner {\r\n    private final Scanner scanner = new Scanner(System.in);\r\n    public Scanner getScanner() {\r\n        return scanner;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/InputScanner.java b/src/main/java/org/example/InputScanner.java
--- a/src/main/java/org/example/InputScanner.java	(revision 654ee3a971821e5edc158f9b7911dce66bfc5f52)
+++ b/src/main/java/org/example/InputScanner.java	(date 1682334826130)
@@ -3,8 +3,8 @@
 import java.util.Scanner;
 
 public class InputScanner {
-    private final Scanner scanner = new Scanner(System.in);
-    public Scanner getScanner() {
+    private final static Scanner scanner = new Scanner(System.in);
+    public static Scanner getScanner() {
         return scanner;
     }
 }
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
new file mode 100644
--- /dev/null	(date 1682334826129)
+++ b/pom.xml	(date 1682334826129)
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <groupId>org.example</groupId>
+    <artifactId>untitled</artifactId>
+    <version>1.0-SNAPSHOT</version>
+    <dependencies>
+        <!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api -->
+        <dependency>
+            <groupId>org.junit.jupiter</groupId>
+            <artifactId>junit-jupiter-api</artifactId>
+            <version>5.9.2</version>
+            <scope>test</scope>
+        </dependency>
+        <!-- https://mvnrepository.com/artifact/org.passay/passay -->
+        <dependency>
+            <groupId>org.passay</groupId>
+            <artifactId>passay</artifactId>
+            <version>1.6.3</version>
+        </dependency>
+
+    </dependencies>
+
+
+    <properties>
+        <maven.compiler.source>19</maven.compiler.source>
+        <maven.compiler.target>19</maven.compiler.target>
+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+    </properties>
+
+</project>
\ No newline at end of file
Index: src/main/java/org/example/view/enums/commands/GameMenuEnum.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/view/enums/commands/GameMenuEnum.java b/src/main/java/org/example/view/enums/commands/GameMenuEnum.java
new file mode 100644
--- /dev/null	(date 1682334826141)
+++ b/src/main/java/org/example/view/enums/commands/GameMenuEnum.java	(date 1682334826141)
@@ -0,0 +1,34 @@
+package org.example.view.enums.commands;
+
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+public enum GameMenuEnum {
+
+    SET_FOOD_RATE("^\\s*food\\s*rate\\s*-r\\s*(?<foodRate>(-2|-1|0|1|2)"),
+    SET_TAX_RATE("^\\s*tax\\s*rate\\s*-r\\s*(?<taxRate>(-3|-2|-1|0|[1,8])"),
+    SHOW_FOOD_RATE("^\\s*food\\s+rate\\s+show\\s*$"),
+    SHOW_TAX_RATE("^\\s*food\\s+rate\\s+show\\s*$"),
+    SET_FEAR_RATE("^\\s*fear\\s*rate\\s*-r\\s*(?<fearRate>(-5|-4|-3|-2|-1|0|[1,5])\\s*"),
+    SHOW_FOOD_LIST("^\\s*show\\s+food\\s+list\\s*$"),
+    SHOW_POPULARITY("^\\s*show\\s+popularity\\s*$"),
+    SHOW_POPULARITY_FACTORS("^\\s*show\\s+popularity\\s+factors\\s*$"),
+;
+
+
+    private final String regex;
+
+    GameMenuEnum(String regex) {
+        this.regex = regex;
+    }
+
+    public String getRegex() {
+        return regex;
+    }
+
+
+    public static Matcher getMatcher(String input, GameMenuEnum regex) {
+        java.util.regex.Matcher matcher = Pattern.compile(regex.getRegex(), Pattern.CASE_INSENSITIVE).matcher(input);
+        return matcher.matches() ? matcher : null;
+    }
+}
Index: src/main/java/org/example/view/enums/commands/SignupMenuEnum.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.view.enums.commands;\r\n\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\npublic enum SignupMenuEnum {\r\n    USER_CREATION(\"^user\\\\s+create\\\\s+((-u\\\\s+(?<username>[^\\\\\\\"]\\\\S*|\\\\\\\"[^\\\\\\\"]+\\\\\\\")\\\\s*)|\" +\r\n            \"(\\\\s*-p\\\\s+(?<password>[^\\\\\\\"]\\\\S*|\\\\\\\"[^\\\\\\\"]+\\\\\\\")\\\\s+(?<configuration>)[^\\\\\\\"]\\\\S*|\" +\r\n            \"\\\\\\\"[^\\\\\\\"]+\\\\\\\")\\\\s*|(-e\\\\s+(?<email>[^\\\\\\\"]\\\\S*|\\\\\\\"[^\\\\\\\"]+\\\\\\\")\\\\s*)|\" +\r\n            \"(-n\\\\s+(?<nickname>[^\\\\\\\"]\\\\S*|\\\\\\\"[^\\\\\\\"]+\\\\\\\")\\\\s*)|\" +\r\n            \"(-s\\\\s+(?<slogan>[^\\\\\\\"]\\\\S*|\\\\\\\"[^\\\\\\\"]+\\\\\\\")\\\\s*))+$\"),\r\n    PICK_QUESTION(\"^\\\\s*question\\\\s*pick\\\\s*\"),\r\n\r\n    ;\r\n\r\n    private final String regex;\r\n\r\n    SignupMenuEnum(String regex) {\r\n        this.regex = regex;\r\n    }\r\n\r\n    public String getRegex() {\r\n        return regex;\r\n    }\r\n\r\n    public static Matcher getMatcher(String input, SignupMenuEnum regex) {\r\n        Matcher matcher = Pattern.compile(regex.getRegex(), Pattern.CASE_INSENSITIVE).matcher(input);\r\n        return matcher.matches() ? matcher : null;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/view/enums/commands/SignupMenuEnum.java b/src/main/java/org/example/view/enums/commands/SignupMenuEnum.java
--- a/src/main/java/org/example/view/enums/commands/SignupMenuEnum.java	(revision 654ee3a971821e5edc158f9b7911dce66bfc5f52)
+++ b/src/main/java/org/example/view/enums/commands/SignupMenuEnum.java	(date 1682334826141)
@@ -9,7 +9,10 @@
             "\\\"[^\\\"]+\\\")\\s*|(-e\\s+(?<email>[^\\\"]\\S*|\\\"[^\\\"]+\\\")\\s*)|" +
             "(-n\\s+(?<nickname>[^\\\"]\\S*|\\\"[^\\\"]+\\\")\\s*)|" +
             "(-s\\s+(?<slogan>[^\\\"]\\S*|\\\"[^\\\"]+\\\")\\s*))+$"),
-    PICK_QUESTION("^\\s*question\\s*pick\\s*"),
+    PICK_QUESTION("^\\s*question\\s+pick\\s*((-q\\s+(?<Qnumber>[^\\\"]\\S*|\\\"[^\\\"]+\\\")\\s*)|" +
+                        "(-a\\s+(?<Qanswer1>[^\\\"]\\S*|\\\"[^\\\"]+\\\")\\s*)|" +
+                        "(-c\\s+(?<Qanswer2>[^\\\"]\\S*|\\\"[^\\\"]+\\\")\\s*))*$"),
+    CREATE_MAP("^\\s*create\\s+map\\s*$"),
 
     ;
 
Index: src/main/java/org/example/view/enums/outputs/SignupMenuOutput.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.view.enums.outputs;\r\n\r\npublic enum SignupMenuOutput {\r\n    EMPTY_FIELD(\"you just missed some fields,\\ntry again!\"),\r\n    INVALID_USERNAME_FORMAT(\"username format is invalid!,\\ntry again!\"),\r\n    INVALID_PASSWORD_FORMAT(\"password format is invalid!,\\ntry something else...\"),\r\n    ERROR_PASSWORD_IS_TOO_SHORT(\"your password is too short!: your password must contain at least 6 characters!,\\ntry again!\"),\r\n    ERROR_PASSWORD_NO_CAPITAL_CHARACTER(\"invalid password format!: your password must contain at least 1 capital alphabet!,\\ntry again!\"),\r\n    ERROR_PASSWORD_NO_SMALL_CHARACTER(\"invalid password format!: your password must contain at least 1 small alphabet!,\\ntry again!\"),\r\n    ERROR_PASSWORD_NO_DIGITS(\"invalid password format!: your password must contain at least 1 digits!,\\ntry again!\"),\r\n    ERROR_PASSWORD_NO_SPECIAL_CHARACTER(\"invalid password format!: your password must contain at least 1 special character!,\\ntry again!\"),\r\n    USERNAME_EXISTS(\"you can't user this username because it already exists!,\\n try something else...\"),\r\n    WEAK_PASSWORD(\"your password is weak!,\\ntry something harder or user \\\"random password\\\"\"),\r\n    USER_AND_PASS_MATCH_ERROR(\"your password is incorrect,\\nenter the correct password or try \\\"forget password\\\"\"),\r\n    DUPLICATE_EMAIL_ERROR(\"a user with this email already exists,\\n enter unique email please!\"),\r\n    INVALID_EMAIL_FORMAT(\"email format is invalid!,\\ntry again!\"),\r\n\r\n\r\n    ;\r\n    private final String output;\r\n\r\n    public String getOutput() {\r\n        return output;\r\n    }\r\n\r\n    SignupMenuOutput(String output) {\r\n        this.output = output;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/view/enums/outputs/SignupMenuOutput.java b/src/main/java/org/example/view/enums/outputs/SignupMenuOutput.java
--- a/src/main/java/org/example/view/enums/outputs/SignupMenuOutput.java	(revision 654ee3a971821e5edc158f9b7911dce66bfc5f52)
+++ b/src/main/java/org/example/view/enums/outputs/SignupMenuOutput.java	(date 1682334826142)
@@ -3,19 +3,22 @@
 public enum SignupMenuOutput {
     EMPTY_FIELD("you just missed some fields,\ntry again!"),
     INVALID_USERNAME_FORMAT("username format is invalid!,\ntry again!"),
+    CHECKED_SUCCESSFULLY("ok"),
     INVALID_PASSWORD_FORMAT("password format is invalid!,\ntry something else..."),
     ERROR_PASSWORD_IS_TOO_SHORT("your password is too short!: your password must contain at least 6 characters!,\ntry again!"),
     ERROR_PASSWORD_NO_CAPITAL_CHARACTER("invalid password format!: your password must contain at least 1 capital alphabet!,\ntry again!"),
     ERROR_PASSWORD_NO_SMALL_CHARACTER("invalid password format!: your password must contain at least 1 small alphabet!,\ntry again!"),
     ERROR_PASSWORD_NO_DIGITS("invalid password format!: your password must contain at least 1 digits!,\ntry again!"),
     ERROR_PASSWORD_NO_SPECIAL_CHARACTER("invalid password format!: your password must contain at least 1 special character!,\ntry again!"),
+    STAND_BY("standing by"),
+    SECURITY_QUESTION("security question"),
     USERNAME_EXISTS("you can't user this username because it already exists!,\n try something else..."),
     WEAK_PASSWORD("your password is weak!,\ntry something harder or user \"random password\""),
     USER_AND_PASS_MATCH_ERROR("your password is incorrect,\nenter the correct password or try \"forget password\""),
     DUPLICATE_EMAIL_ERROR("a user with this email already exists,\n enter unique email please!"),
     INVALID_EMAIL_FORMAT("email format is invalid!,\ntry again!"),
-
-
+    QUIT_FROM_PROCESS("canceling the process"),
+    INVALID_COMMAND("Invalid command!,\ntry again!")
     ;
     private final String output;
 
Index: src/main/java/org/example/view/SignupMenu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.view;\r\n\r\n\r\n\r\nimport org.example.controller.SignupMenuController;\r\n\r\nimport java.util.regex.Matcher;\r\n\r\npublic class SignupMenu extends MainMenu{\r\n    private final SignupMenuController signupMenuController = new SignupMenuController();\r\n    public void checkSigningUp(Matcher matcher) {\r\n        signupMenuController.setUsername(matcher.group(\"username\"));\r\n        signupMenuController.setPassword(matcher.group(\"password\"));\r\n        signupMenuController.setNickname(matcher.group(\"nickname\"));\r\n        signupMenuController.setEmail(matcher.group(\"email\"));\r\n        signupMenuController.setSlogan(matcher.group(\"slogan\"));\r\n        System.out.println(signupMenuController.signupUser());\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/view/SignupMenu.java b/src/main/java/org/example/view/SignupMenu.java
--- a/src/main/java/org/example/view/SignupMenu.java	(revision 654ee3a971821e5edc158f9b7911dce66bfc5f52)
+++ b/src/main/java/org/example/view/SignupMenu.java	(date 1682334826141)
@@ -2,19 +2,112 @@
 
 
 
+import org.example.InputScanner;
 import org.example.controller.SignupMenuController;
+import org.example.view.enums.commands.SignupMenuEnum;
+import org.example.view.enums.outputs.SignupMenuOutput;
 
 import java.util.regex.Matcher;
 
 public class SignupMenu extends MainMenu{
     private final SignupMenuController signupMenuController = new SignupMenuController();
-    public void checkSigningUp(Matcher matcher) {
+    private Matcher signupMenuMatcher;
+    private String signupMenuInput;
+
+    public void run(Matcher signupMenuMatcher) {
+        SignupMenuOutput status;
+        classifyParameters(signupMenuMatcher);
+        status = usernameCheck();
+        if (status.equals(SignupMenuOutput.CHECKED_SUCCESSFULLY)) {
+            status = passwordCheck();
+            if (status.equals(SignupMenuOutput.CHECKED_SUCCESSFULLY)) {
+                //continue
+            }
+        } else if (status.equals(SignupMenuOutput.QUIT_FROM_PROCESS)) {
+            //TODO: returning to the main menu
+        } else {
+            System.out.println(status);
+        }
+
+    }
+
+    private SignupMenuOutput passwordCheck() {
+        if (signupMenuController.getPassword().matches("\\s*random\\s*")) {
+            signupMenuController.setClipBoard(signupMenuController.generateRandomPassword());
+            System.out.println("your password is: "+signupMenuController.getPassword());
+            while (true) {
+                String verification = InputScanner.getScanner().nextLine();
+                System.out.println("re-enter your password please: ");
+                if (signupMenuController.randomPasswordVerification(verification)) {
+                    return SignupMenuOutput.CHECKED_SUCCESSFULLY;
+                } else if (verification.matches("^\\s*quit\\s*$")) {
+                    return SignupMenuOutput.QUIT_FROM_PROCESS;
+                } else {
+                    System.out.println("doesn't matched to the password!,\n try again! or enter \"quit\" to exit");
+                }
+            }
+        }
+        return signupMenuController.passwordCheck(signupMenuController.getPassword());
+    }
+
+    private SignupMenuOutput usernameCheck() {
+        SignupMenuOutput result = signupMenuController.usernameCheckErrors();
+        if (result.equals(SignupMenuOutput.USERNAME_EXISTS)) {
+            while (true) {
+                signupMenuController.usernameSuggestionGenerator();
+                System.out.println("there's another user with this username!,\n" +
+                        "you can use\"" + signupMenuController.getUsername() + "\" or quit the registration process or try something else!");
+                System.out.println("1.accept the suggested username,\n" +
+                        "2.quit,\n" +
+                        "3.try another username,\n" +
+                        "type the number here: ");
+                if (InputScanner.getScanner().nextLine().matches("^\\s*1\\s*$"))
+                    return SignupMenuOutput.CHECKED_SUCCESSFULLY;
+                else if (InputScanner.getScanner().nextLine().matches("^\\s*2\\s*$"))
+                    return SignupMenuOutput.QUIT_FROM_PROCESS;
+                else if (InputScanner.getScanner().nextLine().matches("^\\s*3\\s*$")) {
+                    signupMenuController.setUsername(InputScanner.getScanner().nextLine());
+                    usernameCheck();
+                } else
+                    System.out.println(SignupMenuOutput.INVALID_COMMAND);
+            }
+        }
+        else if (result.equals(SignupMenuOutput.QUIT_FROM_PROCESS)) {
+            return SignupMenuOutput.QUIT_FROM_PROCESS;
+        } else if (result.equals(SignupMenuOutput.CHECKED_SUCCESSFULLY)) {
+            return SignupMenuOutput.CHECKED_SUCCESSFULLY;
+        }
+        return result;
+    }
+
+    public void checkSigningUp(Matcher matcher, InputScanner signupMenuScanner) {
+
+        String message = signupMenuController.signupUserCheck().getOutput();
+        if (signupMenuController.getSlogan().matches("\\s*random\\s*")) {
+            signupMenuController.setSlogan(signupMenuController.generateRandomSlogan());
+            System.out.println("your slogan is: "+signupMenuController.getSlogan());
+        }
+
+        if (message.equals(SignupMenuOutput.SECURITY_QUESTION.getOutput())) {
+            //TODO: printing security questions....
+            while (true) {
+                if ((signupMenuMatcher = SignupMenuEnum.getMatcher(signupMenuInput,SignupMenuEnum.PICK_QUESTION))!=null) {
+                    //TODO: pick question part...
+                }
+            }
+        }
+        if (message.equals(SignupMenuOutput.STAND_BY.getOutput())) {
+            System.out.println("you password is: "+signupMenuController.getClipBoard());
+
+        }
+        System.out.println(signupMenuController.signupUserCheck());
+    }
+    public void classifyParameters(Matcher matcher) {
         signupMenuController.setUsername(matcher.group("username"));
         signupMenuController.setPassword(matcher.group("password"));
         signupMenuController.setNickname(matcher.group("nickname"));
         signupMenuController.setEmail(matcher.group("email"));
         signupMenuController.setSlogan(matcher.group("slogan"));
-        System.out.println(signupMenuController.signupUser());
     }
 
 }
Index: .idea/project-group-15.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"JAVA_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\r\n    <exclude-output />\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src/main/java\" isTestSource=\"false\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src/test/java\" isTestSource=\"false\" />\r\n    </content>\r\n    <orderEntry type=\"inheritedJdk\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/project-group-15.iml b/.idea/project-group-15.iml
--- a/.idea/project-group-15.iml	(revision 654ee3a971821e5edc158f9b7911dce66bfc5f52)
+++ b/.idea/project-group-15.iml	(date 1682334826126)
@@ -1,12 +1,19 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
-  <component name="NewModuleRootManager" inherit-compiler-output="true">
-    <exclude-output />
+<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule="true" type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_19">
+    <output url="file://$MODULE_DIR$/target/classes" />
+    <output-test url="file://$MODULE_DIR$/target/test-classes" />
     <content url="file://$MODULE_DIR$">
       <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
-      <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
+      <excludeFolder url="file://$MODULE_DIR$/target" />
     </content>
     <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.junit.jupiter:junit-jupiter-api:5.9.2" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.opentest4j:opentest4j:1.2.0" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.junit.platform:junit-platform-commons:1.9.2" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.apiguardian:apiguardian-api:1.1.2" level="project" />
+    <orderEntry type="library" name="Maven: org.passay:passay:1.6.3" level="project" />
   </component>
 </module>
\ No newline at end of file
Index: src/main/java/org/example/view/MainMenu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.view;\r\n\r\nimport org.example.InputScanner;\r\nimport org.example.controller.MainMenuController;\r\nimport org.example.view.enums.commands.LoginMenuEnum;\r\nimport org.example.view.enums.commands.SignupMenuEnum;\r\n\r\nimport java.util.regex.Matcher;\r\n\r\npublic class MainMenu {\r\n    private MainMenuController mainMenuController = new MainMenuController();\r\n    public void run() {\r\n        InputScanner mainMenuScanner = new InputScanner();\r\n        Matcher mainMenuMatcher;\r\n        String userInput;\r\n        while (true) {\r\n            userInput = mainMenuScanner.getScanner().nextLine();\r\n            if (userInput.matches(\"\\\\s*exit\\\\s*\"))\r\n                return;\r\n            else if ((mainMenuMatcher = SignupMenuEnum.getMatcher(userInput, SignupMenuEnum.USER_CREATION))!=null) {\r\n                new SignupMenu().checkSigningUp(mainMenuMatcher);\r\n            } else if ((mainMenuMatcher = LoginMenuEnum.getMatcher(userInput, LoginMenuEnum.USER_LOGIN))!=null) {\r\n                new LoginMenu().loginInCheck(mainMenuMatcher);\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/view/MainMenu.java b/src/main/java/org/example/view/MainMenu.java
--- a/src/main/java/org/example/view/MainMenu.java	(revision 654ee3a971821e5edc158f9b7911dce66bfc5f52)
+++ b/src/main/java/org/example/view/MainMenu.java	(date 1682334826140)
@@ -5,22 +5,24 @@
 import org.example.view.enums.commands.LoginMenuEnum;
 import org.example.view.enums.commands.SignupMenuEnum;
 
+import javax.swing.*;
 import java.util.regex.Matcher;
 
 public class MainMenu {
     private MainMenuController mainMenuController = new MainMenuController();
     public void run() {
-        InputScanner mainMenuScanner = new InputScanner();
         Matcher mainMenuMatcher;
         String userInput;
         while (true) {
-            userInput = mainMenuScanner.getScanner().nextLine();
+            userInput = InputScanner.getScanner().nextLine();
             if (userInput.matches("\\s*exit\\s*"))
                 return;
-            else if ((mainMenuMatcher = SignupMenuEnum.getMatcher(userInput, SignupMenuEnum.USER_CREATION))!=null) {
-                new SignupMenu().checkSigningUp(mainMenuMatcher);
+            else if ((mainMenuMatcher = SignupMenuEnum.getMatcher(userInput,SignupMenuEnum.USER_CREATION))!=null) {
+                new SignupMenu().run(mainMenuMatcher);
             } else if ((mainMenuMatcher = LoginMenuEnum.getMatcher(userInput, LoginMenuEnum.USER_LOGIN))!=null) {
                 new LoginMenu().loginInCheck(mainMenuMatcher);
+            } else if (SignupMenuEnum.getMatcher(userInput,SignupMenuEnum.CREATE_MAP)!=null) {
+                new MapMenu().enterMapEnvironmentSettings();
             }
         }
     }
Index: .idea/libraries/Maven__org_passay_passay_1_6_3.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Maven__org_passay_passay_1_6_3.xml b/.idea/libraries/Maven__org_passay_passay_1_6_3.xml
new file mode 100644
--- /dev/null	(date 1682334826125)
+++ b/.idea/libraries/Maven__org_passay_passay_1_6_3.xml	(date 1682334826125)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.passay:passay:1.6.3">
+    <CLASSES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/passay/passay/1.6.3/passay-1.6.3.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$MAVEN_REPOSITORY$/org/passay/passay/1.6.3/passay-1.6.3-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$MAVEN_REPOSITORY$/org/passay/passay/1.6.3/passay-1.6.3-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: src/main/java/org/example/view/LoginMenu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.view;\r\n\r\nimport org.example.InputScanner;\r\nimport org.example.controller.LoginMenuController;\r\nimport org.example.controller.ProfileMenuController;\r\nimport org.example.view.enums.commands.LoginMenuEnum;\r\nimport org.example.view.enums.outputs.LoginMenuOutput;\r\n\r\nimport java.util.regex.Matcher;\r\n\r\npublic class LoginMenu {\r\n    private final LoginMenuController loginMenuController = new ProfileMenuController();\r\n\r\n    public void run(InputScanner loginMenuScanner) {\r\n        Matcher loginMenuMatcher;\r\n        String userInput;\r\n        while (true) {\r\n            userInput = loginMenuScanner.getScanner().nextLine();\r\n            if (userInput.matches(LoginMenuEnum.USER_LOGOUT.getRegex()))\r\n                return;\r\n            //TODO: completing login menu...\r\n        }\r\n    }\r\n\r\n    public void loginInCheck(Matcher mainMenuMatcher) {\r\n        loginMenuController.setUsername(\"username\");\r\n        loginMenuController.setPassword(\"password\");\r\n        loginMenuController.setStayLoggedInFlag(mainMenuMatcher.group(\"stayLogged\") != null);\r\n        String message = loginMenuController.loginUser().getOutput();\r\n        if (message.equals(LoginMenuOutput.LOGGED_IN_SUCCESSFULY)) {\r\n            //TODO: about saving user in the game...\r\n            InputScanner loginMenuScanner = new InputScanner();\r\n            run(loginMenuScanner);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/view/LoginMenu.java b/src/main/java/org/example/view/LoginMenu.java
--- a/src/main/java/org/example/view/LoginMenu.java	(revision 654ee3a971821e5edc158f9b7911dce66bfc5f52)
+++ b/src/main/java/org/example/view/LoginMenu.java	(date 1682334826140)
@@ -4,11 +4,13 @@
 import org.example.controller.LoginMenuController;
 import org.example.controller.ProfileMenuController;
 import org.example.view.enums.commands.LoginMenuEnum;
+import org.example.view.enums.commands.ProfileMenuEnum;
 import org.example.view.enums.outputs.LoginMenuOutput;
+import org.example.view.enums.outputs.ProfileMenuOutput;
 
 import java.util.regex.Matcher;
 
-public class LoginMenu {
+public class LoginMenu extends MainMenu {
     private final LoginMenuController loginMenuController = new ProfileMenuController();
 
     public void run(InputScanner loginMenuScanner) {
@@ -16,9 +18,32 @@
         String userInput;
         while (true) {
             userInput = loginMenuScanner.getScanner().nextLine();
+            ProfileMenu profileMenu = new ProfileMenu(loginMenuController);
             if (userInput.matches(LoginMenuEnum.USER_LOGOUT.getRegex()))
                 return;
-            //TODO: completing login menu...
+            else if ((loginMenuMatcher = ProfileMenuEnum.getMatcher(userInput,ProfileMenuEnum.CHANGE_PROFILE_USERNAME))!=null) {
+                profileMenu.changeUserUsername(loginMenuMatcher);
+            } else if ((loginMenuMatcher = ProfileMenuEnum.getMatcher(userInput,ProfileMenuEnum.CHANGE_PASSWORD))!=null) {
+                profileMenu.changeUserPassword(loginMenuMatcher);
+            } else if ((loginMenuMatcher = ProfileMenuEnum.getMatcher(userInput,ProfileMenuEnum.CHANGE_PROFILE_EMAIL))!=null) {
+                profileMenu.changeUserEmail(loginMenuMatcher);
+            } else if ((loginMenuMatcher = ProfileMenuEnum.getMatcher(userInput,ProfileMenuEnum.CHANGE_PROFILE_NICKNAME))!=null) {
+                profileMenu.changeUserNickname(loginMenuMatcher);
+            } else if ((loginMenuMatcher = ProfileMenuEnum.getMatcher(userInput,ProfileMenuEnum.CHANGE_SLOGAN))!=null) {
+                profileMenu.changeUserSlogan(loginMenuMatcher);
+            } else if (ProfileMenuEnum.getMatcher(userInput,ProfileMenuEnum.REMOVE_SLOGAN)!=null) {
+                profileMenu.removeUserSlogan();
+            } else if (ProfileMenuEnum.getMatcher(userInput,ProfileMenuEnum.DISPLAY_USER_PROFILE)!=null) {
+                profileMenu.displayUserProfile();
+            } else if (ProfileMenuEnum.getMatcher(userInput,ProfileMenuEnum.DISPLAY_USER_SLOGAN)!=null) {
+                profileMenu.displayUserSlogan();
+            } else if (ProfileMenuEnum.getMatcher(userInput,ProfileMenuEnum.DISPLAY_USER_RANK)!=null) {
+                profileMenu.displayUserRank();
+            } else if (ProfileMenuEnum.getMatcher(userInput,ProfileMenuEnum.DISPLAY_PROFILE)!=null) {
+                profileMenu.displayUserInfo();
+            } else {
+                System.out.println(ProfileMenuOutput.INVALID_COMMAND.getOutput());
+            }
         }
     }
 
@@ -29,8 +54,7 @@
         String message = loginMenuController.loginUser().getOutput();
         if (message.equals(LoginMenuOutput.LOGGED_IN_SUCCESSFULY)) {
             //TODO: about saving user in the game...
-            InputScanner loginMenuScanner = new InputScanner();
-            run(loginMenuScanner);
+//            run(loginMenuScanner);
         }
     }
 }
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"19\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 654ee3a971821e5edc158f9b7911dce66bfc5f52)
+++ b/.idea/misc.xml	(date 1682334826125)
@@ -1,5 +1,12 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="MavenProjectsManager">
+    <option name="originalFiles">
+      <list>
+        <option value="$PROJECT_DIR$/pom.xml" />
+      </list>
+    </option>
+  </component>
   <component name="ProjectRootManager" version="2" project-jdk-name="19" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
Index: src/main/java/org/example/view/enums/outputs/GameMenuOutput.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/view/enums/outputs/GameMenuOutput.java b/src/main/java/org/example/view/enums/outputs/GameMenuOutput.java
new file mode 100644
--- /dev/null	(date 1682334826141)
+++ b/src/main/java/org/example/view/enums/outputs/GameMenuOutput.java	(date 1682334826141)
@@ -0,0 +1,5 @@
+package org.example.view.enums.outputs;
+
+public enum GameMenuOutput {
+
+}
Index: src/main/java/org/example/view/GameMenu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.view;\r\n\r\npublic class GameMenu {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/view/GameMenu.java b/src/main/java/org/example/view/GameMenu.java
--- a/src/main/java/org/example/view/GameMenu.java	(revision 654ee3a971821e5edc158f9b7911dce66bfc5f52)
+++ b/src/main/java/org/example/view/GameMenu.java	(date 1682334826139)
@@ -1,4 +1,42 @@
 package org.example.view;
 
+import org.example.InputScanner;
+import org.example.controller.GameMenuController;
+import org.example.controller.SignupMenuController;
+import org.example.view.enums.commands.GameMenuEnum;
+
+import java.util.regex.Matcher;
+
 public class GameMenu {
-}
+
+    private final GameMenuController GameMenuController = new GameMenuController();
+
+    public void run() {
+        InputScanner gameMenuScanner = new InputScanner();
+        Matcher gameMenuMatcher;
+        String input;
+        while (true) {
+            input = gameMenuScanner.getScanner().nextLine();
+            if (input.matches("\\s*exit\\s*"))
+                return;
+          /*  else if ((gameMenuMatcher = GameMenuEnum.getMatcher(input, GameMenuEnum.SET_FOOD_RATE)) != null)
+                //
+            else if ((gameMenuMatcher = GameMenuEnum.getMatcher(input, GameMenuEnum.SET_TAX_RATE)) != null)
+                //
+            else if ((gameMenuMatcher = GameMenuEnum.getMatcher(input, GameMenuEnum.SHOW_FOOD_RATE)) != null)
+                System.out.println(GameMenuController.foodrate());
+            else if ((gameMenuMatcher = GameMenuEnum.getMatcher(input, GameMenuEnum.SHOW_FOOD_RATE)) != null)
+                System.out.println(GameMenuController.taxRate());
+            else if ((gameMenuMatcher = GameMenuEnum.getMatcher(input, GameMenuEnum.SET_FEAR_RATE)) != null)
+                //
+            else if ((gameMenuMatcher = GameMenuEnum.getMatcher(input, GameMenuEnum.SHOW_FOOD_LIST)) != null)
+                //
+            else if ((gameMenuMatcher = GameMenuEnum.getMatcher(input, GameMenuEnum.SHOW_POPULARITY)) != null)
+             //   System.out.println(GameMenuController.popularity());
+            else if ((gameMenuMatcher = GameMenuEnum.getMatcher(input, GameMenuEnum.SHOW_POPULARITY_FACTORS)) != null)
+             //   System.out.println(GameMenuController.factors()); */
+            //TODO: also most add commands for unit
+        }
+    }
+
+}
\ No newline at end of file
Index: src/main/java/org/example/view/MapMenu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/view/MapMenu.java b/src/main/java/org/example/view/MapMenu.java
new file mode 100644
--- /dev/null	(date 1682334888799)
+++ b/src/main/java/org/example/view/MapMenu.java	(date 1682334888799)
@@ -0,0 +1,85 @@
+package org.example.view;
+
+import org.example.InputScanner;
+import org.example.Main;
+import org.example.controller.mapMenuController;
+import org.example.model.gameData.map;
+import org.example.view.enums.commands.mapMenuEnum;
+import org.example.InputScanner;
+
+import java.util.regex.Matcher;
+
+public class MapMenu {
+    private void run(Matcher matcher)
+    {
+        String command;
+        InputScanner scanner = new InputScanner();
+        command = scanner.getScanner().nextLine();
+        while (true)
+        {
+//            if(mapMenuEnum.getMatcher(command,mapMenuEnum.SHOW_MAP) != null)
+//                showMap(Integer.parseInt(matcher.group("xCoordinate"))
+//                        , Integer.parseInt(matcher.group("yCoordinate")));
+//
+
+
+
+        }
+
+        //TODO
+        //
+        //TODO exit
+    }
+<<<<<<< HEAD:src/main/java/org/example/view/mapMenu.java
+    private static void showMap(int x,int y)
+=======
+
+    public void enterMapEnvironmentSettings() {
+
+    }
+   /* private map showMap(int x,int y )
+>>>>>>> origin/mahdi:src/main/java/org/example/view/MapMenu.java
+    {
+
+    }
+        map.setCurrentMap();
+        String command;
+        InputScanner scanner = new InputScanner();
+        Matcher mapMenuMatcher ;
+        while (true)
+        {
+            command = scanner.getScanner().nextLine();
+            if(command.matches("\\s*exit\\s*"))
+                break;
+            else if((mapMenuMatcher = mapMenuEnum.getMatcher(command,mapMenuEnum.SHOW_MAP)) != null)
+                showMap(Integer.parseInt(mapMenuMatcher.group("xCoordinate"))
+                        , Integer.parseInt(mapMenuMatcher.group("yCoordinate")));
+                    //TODO moving on map should be added
+
+        /*TODO map should be shown 10 up down left right
+        s : soldier
+        SG : small gatehouse
+        BG : big gatehouse
+        D : drawBridge
+        LT : lookoutTower
+        PT : perimeter tower
+
+/*
+
+
+
+        return null;
+    }
+    private map showDetails(int x ,int y)
+    {
+        // TODO : only a tile should be shown
+        return null;
+
+    }
+    // TODO : have a guide for map tiles
+
+    private void changeEnvironment(int x, int y)
+    {
+        //should check
+    }*/
+}
Index: src/main/java/org/example/model/enums/SecurityQuestion.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/model/enums/SecurityQuestion.java b/src/main/java/org/example/model/enums/SecurityQuestion.java
new file mode 100644
--- /dev/null	(date 1682334826138)
+++ b/src/main/java/org/example/model/enums/SecurityQuestion.java	(date 1682334826138)
@@ -0,0 +1,26 @@
+package org.example.model.enums;
+public enum SecurityQuestion {
+    FATHER_NAME(1,"What's my father's name?"),
+    BROTHER_NAME(2,"What's my brother's name?"),
+    LAPTOP_MODEL(3,"What's my laptop model?"),
+    PHONE_MODEL(4,"What's my cellphone model?"),
+    HAIR_COLOR(5,"What's my hair color?"),
+    CAR_COLOR(6,"What's my car color?"),
+    FAVORITE_FOOD(7,"What's my favorite food?"),
+    FAVORITE_GAME(8,"What's my favorite game?"),
+    USER_JOB(9,"What's my job?"),
+    USER_AGE(10,"What's my age?")
+    ;
+    private final String question;
+    private final int questionNumber;
+    SecurityQuestion(int questionNumber,String question) {
+        this.question = question;
+        this.questionNumber = questionNumber;
+    }
+    public String getQuestion() {
+        return question;
+    }
+    public int getQuestionNumber() {
+        return questionNumber;
+    }
+}
\ No newline at end of file
Index: src/main/java/org/example/controller/MapChangesMenuController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/controller/MapChangesMenuController.java b/src/main/java/org/example/controller/MapChangesMenuController.java
new file mode 100644
--- /dev/null	(date 1682334841491)
+++ b/src/main/java/org/example/controller/MapChangesMenuController.java	(date 1682334841491)
@@ -0,0 +1,50 @@
+package org.example.controller;
+import org.example.model.enums.LandType;
+import org.example.model.gameData.map;
+
+public class mapChangesMenuController {
+    private void setTexture(int x , int y,String type)
+    {
+        for(LandType l : LandType.values())
+            if(l.equals(type)) {
+             LandType  newLandType = l;
+             map.findATile(x , y).setLandType(newLandType);
+            }
+
+
+    }
+    private void setTexture(int x1, int y1,int x2, int y2,String type)
+    {
+
+    }
+    private void clear(int x , int y)
+    {
+        map.findATile(x ,y).setBuilding(null);
+        map.findATile(x , y).setSoldier(null);
+
+
+    }
+    private void dropUnit(int x , int y, String type)
+    {
+        //TODO list of units should be added to make this method work
+
+    }
+    private void dropBuilding(int x , int y , String type)
+    {
+
+
+    }
+    private void dropTree(int x , int y, String type)
+    {
+        // TODO the input string should be matched with the one in enum
+        map.findATile(x , y).setTreeName(type);
+
+    }
+    private void dropRock(int x , int y , char direction)
+    {
+        //TODO direction should be added
+        map.findATile(x,y).setRock();
+
+    }
+
+}
Index: src/main/java/org/example/controller/MapMenuController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/controller/MapMenuController.java b/src/main/java/org/example/controller/MapMenuController.java
new file mode 100644
--- /dev/null	(date 1682334862505)
+++ b/src/main/java/org/example/controller/MapMenuController.java	(date 1682334862505)
@@ -0,0 +1,37 @@
+package org.example.controller;
+
+public class mapMenuController {
+    public mapMenuController() {
+    }
+    private void setTexture(int x1, int y1,int x2, int y2,String type)
+    {
+
+    }
+    private void clear()
+    {
+
+    }
+    private void dropRock()
+    {
+    }
+    private void dropUnit(int x , int y, String type)
+    {
+
+    }
+    private void dropBuilding(int x , int y)
+    {
+
+    }
+    private void dropTree(int x , int y, String type)
+    {
+
+    }
+    private void dropRock(int x , int y , char direction)
+    {
+
+    }
+    private boolean checkLand(int x , int y)
+    {
+        return true;
+    }
+}
Index: src/main/java/org/example/model/enums/Products.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.model.enums;\r\n\r\npublic enum products {\r\n    APPLE,\r\n    HOP,\r\n    BREAD,\r\n    MEAT,\r\n    WEAT,\r\n    BEER,\r\n    ARMOUR,\r\n    CHEESE,\r\n    FLOUR,\r\n    ROCK,\r\n    IRON,\r\n    PITCH,\r\n    WOOD,\r\n    VEST,\r\n    HORSE,\r\n    GOLD_COIN,\r\n    SWORD,\r\n    SPEAR,\r\n    ARCHE,\r\n    MACE,\r\n    OILPOT,\r\n\r\n    ;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/model/enums/Products.java b/src/main/java/org/example/model/enums/Products.java
new file mode 100644
--- /dev/null	(date 1682334826138)
+++ b/src/main/java/org/example/model/enums/Products.java	(date 1682334826138)
@@ -0,0 +1,27 @@
+package org.example.model.enums;
+
+public enum Products {
+    APPLE,
+    HOP,
+    BREAD,
+    MEAT,
+    WEAT,
+    BEER,
+    ARMOUR,
+    CHEESE,
+    FLOUR,
+    ROCK,
+    IRON,
+    PITCH,
+    WOOD,
+    VEST,
+    HORSE,
+    GOLD_COIN,
+    SWORD,
+    SPEAR,
+    ARCHE,
+    MACE,
+    OILPOT,
+
+    ;
+}
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_۲۴_۰۴_۲۰۲۳_۰۱_۳۱_بعدازظهر_[Changes]1/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_۲۴_۰۴_۲۰۲۳_۰۱_۳۱_بعدازظهر_[Changes]1/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_۲۴_۰۴_۲۰۲۳_۰۱_۳۱_بعدازظهر_[Changes]1/shelved.patch
new file mode 100644
--- /dev/null	(date 1682334826128)
+++ b/.idea/shelf/Uncommitted_changes_before_Checkout_at_۲۴_۰۴_۲۰۲۳_۰۱_۳۱_بعدازظهر_[Changes]1/shelved.patch	(date 1682334826128)
@@ -0,0 +1,555 @@
+Index: src/main/java/org/example/view/mapMenu.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package org.example.view;\r\n\r\nimport java.util.regex.Matcher;\r\n\r\npublic class mapMenu {\r\n    private void run(Matcher matcher)\r\n    {\r\n        //TODO\r\n        //\r\n        //TODO exit\r\n    }\r\n    private void showMap(int x,int y)\r\n    {\r\n\r\n    }\r\n\r\n        /*TODO map should be shown 10 up down left right\r\n        s : soldier\r\n        SG : small gatehouse\r\n        BG : big gatehouse\r\n        D : drawBridge\r\n        LT : lookoutTower\r\n        PT : perimeter tower\r\n\r\n/*\r\n\r\n\r\n\r\n        return null;\r\n    }\r\n    private map showDetails(int x ,int y)\r\n    {\r\n        // TODO : only a tile should be shown\r\n        return null;\r\n\r\n    }\r\n    // TODO : have a guide for map tiles\r\n\r\n    private void changeEnvironment(int x, int y)\r\n    {\r\n        //should check\r\n    }*/\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/main/java/org/example/view/mapMenu.java b/src/main/java/org/example/view/mapMenu.java
+--- a/src/main/java/org/example/view/mapMenu.java	
++++ b/src/main/java/org/example/view/mapMenu.java	
+@@ -1,15 +1,32 @@
+ package org.example.view;
+ 
++import org.example.InputScanner;
++import org.example.view.enums.commands.mapMenuEnum;
++
+ import java.util.regex.Matcher;
+ 
+ public class mapMenu {
+     private void run(Matcher matcher)
+     {
++        String command;
++        InputScanner scanner = new InputScanner();
++        command = scanner.getScanner().nextLine();
++        while (true)
++        {
++            if(mapMenuEnum.getMatcher(command,mapMenuEnum.SHOW_MAP) != null)
++                showMap(Integer.parseInt(matcher.group("xCoordinate"))
++                        , Integer.parseInt(matcher.group("yCoordinate")));
++
++
++
++
++        }
++
+         //TODO
+         //
+         //TODO exit
+     }
+-    private void showMap(int x,int y)
++    private static void showMap(int x,int y)
+     {
+ 
+     }
+Index: src/main/java/org/example/controller/mapMenuController.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package org.example.controller;\r\n\r\npublic class mapMenuController {\r\n\r\n    private void setTexture(int x , int y,String type)\r\n    {\r\n\r\n    }\r\n    private void setTexture(int x1, int y1,int x2, int y2,String type)\r\n    {\r\n\r\n    }\r\n    private void clear()\r\n    {\r\n\r\n    }\r\n    private void dropRock()\r\n    {\r\n    }\r\n    private void dropUnit(int x , int y, String type)\r\n    {\r\n\r\n    }\r\n    private void dropBuilding(int x , int y)\r\n    {\r\n\r\n    }\r\n    private void dropTree(int x , int y, String type)\r\n    {\r\n\r\n    }\r\n    private void dropRock(int x , int y , char direction)\r\n    {\r\n\r\n    }\r\n    private boolean checkLand(int x , int y)\r\n    {\r\n        return true;\r\n    }\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/main/java/org/example/controller/mapMenuController.java b/src/main/java/org/example/controller/mapMenuController.java
+--- a/src/main/java/org/example/controller/mapMenuController.java	
++++ b/src/main/java/org/example/controller/mapMenuController.java	
+@@ -1,6 +1,22 @@
+ package org.example.controller;
++import org.example.model.map;
++import org.example.model.tile;
+ 
+ public class mapMenuController {
++    private void showMap(int x , int y)
++    {
++        tile currentTile = map.getCurrentMap()[x-1][y-1] ;
++        tile[][] mapToShow = new tile[10][10];
++
++
++    }
++
++    /*private String showDetails(int x , int y) {
++        if (map.getCurrentMap()[x - 1][y - 1].getBuilding() == null) {
++            // return map.findATile(x-1 , y-1).
++
++        }
++    }*/
+ 
+     private void setTexture(int x , int y,String type)
+     {
+@@ -33,8 +49,8 @@
+     {
+ 
+     }
+-    private boolean checkLand(int x , int y)
+-    {
++    private boolean checkLand(int x , int y) {
+         return true;
+     }
+ }
++
+Index: src/main/java/org/example/view/ProfileMenu.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package org.example.view;\r\n\r\nimport org.example.controller.LoginMenuController;\r\nimport org.example.controller.ProfileMenuController;\r\n\r\nimport java.util.regex.Matcher;\r\n\r\npublic class ProfileMenu extends LoginMenu{\r\n    private final ProfileMenuController profileMenuController;\r\n    public ProfileMenu(LoginMenuController currentUserController) {\r\n        this.profileMenuController = (ProfileMenuController) currentUserController;\r\n    }\r\n    protected void changeUserUsername(Matcher matcher) {\r\n        String username = matcher.group(\"username\");\r\n        System.out.println(profileMenuController.changeUsername(username).getOutput());\r\n    }\r\n\r\n    protected void changeUserPassword(Matcher matcher) {\r\n        String oldPass = matcher.group(\"oldPass\");\r\n        String newPass = matcher.group(\"newPass\");\r\n        System.out.println(profileMenuController.changePassword(oldPass,newPass));\r\n    }\r\n    protected void changeUserNickname(Matcher matcher) {\r\n        String nickName = matcher.group(\"nickname\");\r\n        System.out.println(profileMenuController.changeNickname(nickName));\r\n    }\r\n    protected void changeUserEmail(Matcher matcher) {\r\n        String email = matcher.group(\"email\");\r\n        System.out.println(profileMenuController.changeEmail(email));\r\n    }\r\n    protected void changeUserSlogan(Matcher matcher) {\r\n        String slogan = matcher.group(\"slogan\");\r\n        System.out.println(profileMenuController.changeSlogan(slogan));\r\n    }\r\n\r\n    protected void removeUserSlogan() {\r\n        System.out.println(profileMenuController.removeSlogan());\r\n    }\r\n\r\n    protected void displayUserProfile() {\r\n        profileMenuController.showUserHighestScore();\r\n    }\r\n\r\n    protected void displayUserRank() {\r\n        profileMenuController.showUserRank();\r\n    }\r\n\r\n    protected void displayUserSlogan() {\r\n        profileMenuController.showUserSlogan();\r\n\r\n    }\r\n    protected void displayUserInfo() {\r\n        profileMenuController.showUserProfileDisplay();\r\n    }\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/main/java/org/example/view/ProfileMenu.java b/src/main/java/org/example/view/ProfileMenu.java
+--- a/src/main/java/org/example/view/ProfileMenu.java	
++++ b/src/main/java/org/example/view/ProfileMenu.java	
+@@ -18,7 +18,7 @@
+     protected void changeUserPassword(Matcher matcher) {
+         String oldPass = matcher.group("oldPass");
+         String newPass = matcher.group("newPass");
+-        System.out.println(profileMenuController.changePassword(oldPass,newPass));
++        //System.out.println(profileMenuController.changePassword(oldPass,newPass));
+     }
+     protected void changeUserNickname(Matcher matcher) {
+         String nickName = matcher.group("nickname");
+@@ -33,9 +33,9 @@
+         System.out.println(profileMenuController.changeSlogan(slogan));
+     }
+ 
+-    protected void removeUserSlogan() {
++   /* protected void removeUserSlogan() {
+         System.out.println(profileMenuController.removeSlogan());
+-    }
++    }*/
+ 
+     protected void displayUserProfile() {
+         profileMenuController.showUserHighestScore();
+Index: src/main/java/org/example/model/gameData/map.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package org.example.model.gameData;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class map {\r\n    int height;\r\n    int weight;\r\n    tiles [][] currentMap = new tiles[200][200];\r\n\r\n    public tiles[][] getCurrentMap() {\r\n        return currentMap;\r\n    }\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/main/java/org/example/model/gameData/map.java b/src/main/java/org/example/model/gameData/map.java
+--- a/src/main/java/org/example/model/gameData/map.java	
++++ b/src/main/java/org/example/model/gameData/map.java	
+@@ -2,12 +2,16 @@
+ 
+ import java.util.ArrayList;
+ 
+-public class map {
++public abstract class map {
+     int height;
+     int weight;
+-    tiles [][] currentMap = new tiles[200][200];
++     public static tile [][] currentMap = new tile[200][200];
+ 
+-    public tiles[][] getCurrentMap() {
++    public static tile[][] getCurrentMap() {
+         return currentMap;
+     }
++    public static tile findATile(int x , int y )
++    {
++         return currentMap[x-1][y-1];
++    }
+ }
+Index: src/main/java/org/example/model/building/Storage.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package org.example.model.building;\r\n\r\nimport org.example.model.enums.Source;\r\npublic class Storage extends Building{\r\n    private int capacity;\r\n    private final Source sourceType;\r\n\r\n    public Storage(int hp, int width, int height, int buildingCost, int capacity, Source sourceType) {\r\n        super(hp, width, height, buildingCost);\r\n        this.capacity = capacity;\r\n        this.sourceType = sourceType;\r\n    }\r\n\r\n    public int showCapacity() {\r\n        return capacity;\r\n    }\r\n\r\n    public void changingCapacity(int capacity,int flag) {\r\n        if (flag==1) {\r\n            this.capacity+=capacity;\r\n            return;\r\n        }\r\n        this.capacity-=capacity;\r\n    }\r\n\r\n    public Source getSourceType() {\r\n        return sourceType;\r\n    }\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/main/java/org/example/model/building/Storage.java b/src/main/java/org/example/model/building/Storage.java
+--- a/src/main/java/org/example/model/building/Storage.java	
++++ b/src/main/java/org/example/model/building/Storage.java	
+@@ -1,14 +1,16 @@
+ package org.example.model.building;
+ 
+ import org.example.model.enums.Source;
++import org.example.model.enums.products;
++
+ public class Storage extends Building{
+     private int capacity;
+-    private final Source sourceType;
++    private final products good;
+ 
+-    public Storage(int hp, int width, int height, int buildingCost, int capacity, Source sourceType) {
++    public Storage(int hp, int width, int height, int buildingCost, int capacity, products good) {
+         super(hp, width, height, buildingCost);
+         this.capacity = capacity;
+-        this.sourceType = sourceType;
++        this.good = good;
+     }
+ 
+     public int showCapacity() {
+@@ -23,7 +25,7 @@
+         this.capacity-=capacity;
+     }
+ 
+-    public Source getSourceType() {
+-        return sourceType;
++    public products getGood() {
++        return good;
+     }
+ }
+Index: src/main/java/org/example/model/building/ProductiveBuilding.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package org.example.model.building;\r\n\r\nimport org.example.model.interfaces.produce;\r\nimport org.example.model.enums.Source;\r\n\r\npublic class ProductiveBuilding extends Building implements produce {\r\n    private final int rate;\r\n    private boolean needMaterial;\r\n    private final Source product;\r\n\r\n    public ProductiveBuilding(int hp, int width, int height, int buildingCost, int rate,boolean needMaterial, Source product) {\r\n        super(hp, width, height, buildingCost);\r\n        this.rate = rate;\r\n        this.needMaterial = needMaterial;\r\n        this.product = product;\r\n    }\r\n\r\n    public Source getProduct() {\r\n        return product;\r\n    }\r\n\r\n    public int getRate() {\r\n        return rate;\r\n    }\r\n    @Override\r\n    public void production() {\r\n        //TODO:\r\n    }\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/main/java/org/example/model/building/ProductiveBuilding.java b/src/main/java/org/example/model/building/ProductiveBuilding.java
+--- a/src/main/java/org/example/model/building/ProductiveBuilding.java	
++++ b/src/main/java/org/example/model/building/ProductiveBuilding.java	
+@@ -1,21 +1,22 @@
+ package org.example.model.building;
+ 
++import org.example.model.enums.products;
+ import org.example.model.interfaces.produce;
+ import org.example.model.enums.Source;
+ 
+ public class ProductiveBuilding extends Building implements produce {
+     private final int rate;
+     private boolean needMaterial;
+-    private final Source product;
++    private final products product;
+ 
+-    public ProductiveBuilding(int hp, int width, int height, int buildingCost, int rate,boolean needMaterial, Source product) {
++    public ProductiveBuilding(int hp, int width, int height, int buildingCost, int rate,boolean needMaterial, products product) {
+         super(hp, width, height, buildingCost);
+         this.rate = rate;
+         this.needMaterial = needMaterial;
+         this.product = product;
+     }
+ 
+-    public Source getProduct() {
++    public products getProduct() {
+         return product;
+     }
+ 
+Index: src/main/java/org/example/controller/mapChangesMenuController.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package org.example.controller;\r\n\r\npublic class mapChangesMenuController {\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/main/java/org/example/controller/mapChangesMenuController.java b/src/main/java/org/example/controller/mapChangesMenuController.java
+--- a/src/main/java/org/example/controller/mapChangesMenuController.java	
++++ b/src/main/java/org/example/controller/mapChangesMenuController.java	
+@@ -1,4 +1,5 @@
+ package org.example.controller;
+ 
+ public class mapChangesMenuController {
++
+ }
+Index: src/main/java/org/example/model/building/Market.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package org.example.model.building;\r\n\r\nimport java.util.ArrayList;\r\nimport org.example.model.enums.*;\r\npublic class Market extends Building{\r\n    private ArrayList<Food> userFoods;\r\n    private ArrayList<Source> userSources;\r\n    private ArrayList<Weapon> userWeapons;\r\n\r\n    public Market(int hp, int width, int height, int buildingCost) {\r\n        super(hp, width, height, buildingCost);\r\n        this.userFoods = new ArrayList<>();\r\n        this.userSources = new ArrayList<>();\r\n        this.userWeapons = new ArrayList<>();\r\n    }\r\n\r\n    public ArrayList<Food> getUserFoods() {\r\n        return userFoods;\r\n    }\r\n\r\n    public ArrayList<Source> getUserSources() {\r\n        return userSources;\r\n    }\r\n\r\n    public ArrayList<Weapon> getUserWeapons() {\r\n        return userWeapons;\r\n    }\r\n\r\n    public void showUserFoodsAmount() {\r\n        System.out.println(getUserFoods().size());\r\n    }\r\n\r\n    public void showUsersourcesAmount() {\r\n        System.out.println(getUserSources().size());\r\n    }\r\n\r\n    public void showUserWeaponsAmount() {\r\n        System.out.println(getUserWeapons().size());\r\n    }\r\n\r\n    public void buyItem(String item) {\r\n        //TODO:\r\n    }\r\n\r\n    public void sellItem(String item) {\r\n        //TODO:\r\n    }\r\n\r\n    public void showStoreInventory() {\r\n        //TODO:\r\n        return;\r\n    }\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/main/java/org/example/model/building/Market.java b/src/main/java/org/example/model/building/Market.java
+--- a/src/main/java/org/example/model/building/Market.java	
++++ b/src/main/java/org/example/model/building/Market.java	
+@@ -3,7 +3,7 @@
+ import java.util.ArrayList;
+ import org.example.model.enums.*;
+ public class Market extends Building{
+-    private ArrayList<Food> userFoods;
++    private ArrayList<products> userFoods;
+     private ArrayList<Source> userSources;
+     private ArrayList<Weapon> userWeapons;
+ 
+@@ -14,7 +14,7 @@
+         this.userWeapons = new ArrayList<>();
+     }
+ 
+-    public ArrayList<Food> getUserFoods() {
++    public ArrayList<products> getUserFoods() {
+         return userFoods;
+     }
+ 
+Index: src/main/java/org/example/model/tile.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/main/java/org/example/model/tile.java b/src/main/java/org/example/model/tile.java
+new file mode 100644
+--- /dev/null	
++++ b/src/main/java/org/example/model/tile.java	
+@@ -0,0 +1,43 @@
++package org.example.model;
++
++import org.example.model.MBC.Soldier;
++import org.example.model.building.Building;
++
++public class tile {
++    private Building building = null;
++    private LandType landType;
++    private int numberOfSoldiers;
++    private Soldier soldier = null;
++
++    public void setBuilding(Building building) {
++        this.building = building;
++    }
++
++    public void setLandType(LandType landType) {
++        this.landType = landType;
++    }
++
++    public void addToNumberOfSoldiers(int numberOfSoldiers) {
++        this.numberOfSoldiers += numberOfSoldiers;
++    }
++
++    public void setSoldier(Soldier soldier) {
++        this.soldier = soldier;
++    }
++
++    public Building getBuilding() {
++        return building;
++    }
++
++    public LandType getLandType() {
++        return landType;
++    }
++
++    public int getNumberOfSoldiers() {
++        return numberOfSoldiers;
++    }
++
++    public Soldier getSoldier() {
++        return soldier;
++    }
++}
+Index: src/main/java/org/example/model/building/CityBuilding.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package org.example.model.building;\r\n\r\n\r\npublic class CityBuilding extends Building{\r\n    private final int capacity;\r\n\r\n    public CityBuilding(int hp, int width, int height, int buildingCost, int capacity) {\r\n        super(hp, width, height, buildingCost);\r\n        this.capacity = capacity;\r\n    }\r\n\r\n    public int getCapacity() {\r\n        return capacity;\r\n    }\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/main/java/org/example/model/building/CityBuilding.java b/src/main/java/org/example/model/building/CityBuilding.java
+--- a/src/main/java/org/example/model/building/CityBuilding.java	
++++ b/src/main/java/org/example/model/building/CityBuilding.java	
+@@ -2,14 +2,14 @@
+ 
+ 
+ public class CityBuilding extends Building{
+-    private final int capacity;
++    private final int peopleCapacity;
+ 
+     public CityBuilding(int hp, int width, int height, int buildingCost, int capacity) {
+         super(hp, width, height, buildingCost);
+-        this.capacity = capacity;
++        this.peopleCapacity = capacity;
+     }
+ 
+     public int getCapacity() {
+-        return capacity;
++        return peopleCapacity;
+     }
+ }
+Index: src/main/java/org/example/model/enums/products.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/main/java/org/example/model/enums/products.java b/src/main/java/org/example/model/enums/products.java
+new file mode 100644
+--- /dev/null	
++++ b/src/main/java/org/example/model/enums/products.java	
+@@ -0,0 +1,27 @@
++package org.example.model.enums;
++
++public enum products {
++    APPLE,
++    HOP,
++    BREAD,
++    MEAT,
++    WEAT,
++    BEER,
++    ARMOUR,
++    CHEESE,
++    FLOUR,
++    ROCK,
++    IRON,
++    PITCH,
++    WOOD,
++    VEST,
++    HORSE,
++    GOLD_COIN,
++    SWORD,
++    SPEAR,
++    ARCHE,
++    MACE,
++    OILPOT,
++
++    ;
++}
+Index: src/main/java/org/example/model/building/Building.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package org.example.model.building;\r\n\r\n\r\nimport org.example.model.MBC.Person;\r\nimport org.example.model.tiles;\r\n\r\npublic class Building {\r\n    private final int hp;\r\n    private int width;\r\n    private int height;\r\n    private final int buildingCost;\r\n    private Person worker;\r\n\r\n    public Building(int hp, int width, int height, int buildingCost) {\r\n        this.hp = hp;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.buildingCost = buildingCost;\r\n    }\r\n\r\n    public int getHp() {\r\n        return hp;\r\n    }\r\n\r\n    public int getWidth() {\r\n        return width;\r\n    }\r\n\r\n    public int getHeight() {\r\n        return height;\r\n    }\r\n\r\n    public int getBuildingCost() {\r\n        return buildingCost;\r\n    }\r\n\r\n    public Person getWorker() {\r\n        return worker;\r\n    }\r\n\r\n    public void setPosition(int width,int height) {\r\n        this.height = height;\r\n        this.width = width;\r\n    }\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/main/java/org/example/model/building/Building.java b/src/main/java/org/example/model/building/Building.java
+--- a/src/main/java/org/example/model/building/Building.java	
++++ b/src/main/java/org/example/model/building/Building.java	
+@@ -2,7 +2,7 @@
+ 
+ 
+ import org.example.model.MBC.Person;
+-import org.example.model.tiles;
++import org.example.model.tile;
+ 
+ public class Building {
+     private final int hp;
+Index: src/main/java/org/example/model/building/buildingName.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/main/java/org/example/model/building/buildingName.java b/src/main/java/org/example/model/building/buildingName.java
+new file mode 100644
+--- /dev/null	
++++ b/src/main/java/org/example/model/building/buildingName.java	
+@@ -0,0 +1,139 @@
++package org.example.model.building;
++
++import org.example.model.enums.Source;
++import org.example.model.enums.products;
++
++import static org.example.model.enums.products.*;
++
++public enum buildingName {
++    //TODO the rate & capacity & cost should be specified for each building
++    MILL(20, WOOD, 0, null, 1, null, FLOUR, 100),
++    IRON_MINE(20, WOOD, 0, null, 2, IRON, null, 100),
++    QUARRY(20, WOOD, 0, null, 3, ROCK, null, 100),
++    WOODCUTTER(3, WOOD, 0, null, 1, WOOD, null, 100),
++    APPLE_GARDEN(5, WOOD, 0, null, 1, APPLE, null, 100),
++    PITCH_RIG(20 , WOOD , 0 , null , 1 , PITCH , null , 100),
++    HOP_FARM(5, WOOD, 0, null, 1, HOP, null, 100),
++    HUNTING_BUILDING(5, WOOD, 0, null, 1, MEAT, null, 100),
++    WEAT_FARM(15, WOOD, 0, null, 1, WEAT, null, 100),
++    BAKERY(10, WOOD, 0, null, 1, BREAD, null, 100),
++    BEER_MAKING(10, WOOD, 0, null, 1, BEER, null, 100),
++    ARMOURER(100, GOLD_COIN, 20, WOOD, 1, ARMOUR, null, 100),
++    BLACKSMITH(100, GOLD_COIN, 20, WOOD, 1, SWORD, MACE, 100),
++    POLETURNER(100, GOLD_COIN, 20, WOOD, 1, SPEAR, null, 100),
++    FLETCHER(100, GOLD_COIN, 20, WOOD, 1, ARCHE, null, 100),
++    OIL_SMELTLER(10, IRON, 100, GOLD_COIN, 1, OILPOT, null, 100),
++    STABLE(20, WOOD, 400, GOLD_COIN, 0, HORSE, null, 100),
++    ARMOURY(5 , WOOD , 100 ),
++    OX_TETHER( 5 , WOOD , 0 , null ,  1 ),
++    BARRAK(10 , 0 , 15 , ROCK  , 0 , null),
++    ENGINEER_GUILD(10 , 20 , 10 , WOOD , 100 , GOLD_COIN  ),
++    MERCENARY_POST(10 , 0 , 10 , WOOD , 0 , null ),
++    STORE( 5, WOOD , 100 ),
++    FOODSTORE( 5 , WOOD , 100),
++    LOOKOUT_TOWER(100 , 100),
++    PERMETER_TOWER(100 , 100),
++    DEFEND_TURRET(100 , 100),
++    SQUARE_TOWER(100 , 100),
++    CIRCLE_TOWER(100 , 100),
++    SMALL_STONE_GATEHOUSE(0 , null , 8),
++    BIG_STONE_GATEHOUSE(20 , ROCK , 10),
++    HOUSE(6 , WOOD , 0 , null , 0),
++    INN( 5 , 20 , WOOD , 100 , GOLD_COIN ),
++    CHURCH(2 , 250 , GOLD_COIN , 0 , null ),
++    CATHERDAL(2 , 100 , GOLD_COIN , 0 , null),
++    KILLINGPIT( 10 ,6 , WOOD ),
++    CAGED_WAR_DOGS(10 , WOOD , 100 , GOLD_COIN , 0),
++    SIEGE_TENT(0, null , 0 , null , 1),
++    PITCH_DITCH( 2 , PITCH , 0 , null , 0),
++    DRAWBRIDGE(10 , WOOD , 0 , null , 0),
++
++
++
++    ;
++    private int numberOfMaterial1;
++    private int numberOfMaterial2;
++    private products material1Name;
++    private products material2Name;
++    private int numberOfMaterial;
++    private products materialName;
++    private int numberOfWorkers;
++    private products good1;
++    private products good2;
++    private int rate;
++    private int capacity;
++    private int fireRange;
++    private int defendRange;
++    private int popularityRate;
++    private int damage;
++    private int costForEachPerson;
++    private int costForEachPerson2;
++
++
++
++    //productive building
++    buildingName(int numberOfMaterial1, products material1Name, int numberOfMaterial2, products material2Name,
++                 int numberOfWorkers, products good1, products good2, int rate) {
++        this.numberOfMaterial1 = numberOfMaterial1;
++        this.material1Name = material1Name;
++        this.numberOfMaterial2 = numberOfMaterial2;
++        this.material2Name = material2Name;
++        this.numberOfWorkers = numberOfWorkers;
++        this.good1 = good1;
++        this.good2 = good2;
++        this.rate = rate;
++    }
++    //storage building
++    buildingName(int numberOfMaterial , products materialName , int capacity)
++    {
++        this.numberOfMaterial = numberOfMaterial ;
++        this.materialName = materialName ;
++        this.capacity = capacity ;
++
++    }
++    // war buildings
++    buildingName(int fireRange , int defendRange)
++    {
++        this.fireRange =  fireRange;
++        this.defendRange = defendRange;
++    }
++    //city buildings
++    buildingName(int popularityRate,int numberOfMaterial1, products material1Name , int numberOfMaterial2, products material2Name)
++    {
++        this.numberOfMaterial = numberOfMaterial1;
++        this.materialName = material1Name ;
++        this.popularityRate = popularityRate ;
++        this.numberOfMaterial2 = numberOfMaterial2 ;
++        this.material2Name = material2Name ;
++    }
++    buildingName(int damage , int numberOfMaterial , products materialName)
++    {
++        this.damage = damage;
++        this.numberOfMaterial = numberOfMaterial ;
++        this.materialName = materialName ;
++    }
++    buildingName(int numberOfMaterial1 , products material1Name , int numberOfMaterial2 , products material2Name, int numberOfWorkers)
++    {
++        this.numberOfMaterial1 = numberOfMaterial1 ;
++        this.material1Name = material1Name ;
++        this.numberOfMaterial2 = numberOfMaterial2 ;
++        this.material2Name = material2Name ;
++        this.numberOfMaterial2 = numberOfMaterial2 ;
++
++    }
++    //educations
++    buildingName(int costForEachPerson , int costForEachPerson2 , int numberOfMaterial1 , products material1Name,int numberOfMaterial2, products material2Name)
++    {
++        this.costForEachPerson = costForEachPerson;
++        this.costForEachPerson2 = costForEachPerson2 ;
++        this.numberOfMaterial1 = numberOfMaterial1;
++        this.material1Name = material1Name ;
++        this.numberOfMaterial2 = numberOfMaterial2 ;
++        this.material2Name = material2Name ;
++    }
++
++
++
++    }
++
++
Index: .idea/shelf/Uncommitted_changes_before_Merge_at_۲۴_۰۴_۲۰۲۳_۰۱_۳۳_بعدازظهر_[Changes]/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Merge_at_۲۴_۰۴_۲۰۲۳_۰۱_۳۳_بعدازظهر_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Merge_at_۲۴_۰۴_۲۰۲۳_۰۱_۳۳_بعدازظهر_[Changes]/shelved.patch
new file mode 100644
--- /dev/null	(date 1682334826129)
+++ b/.idea/shelf/Uncommitted_changes_before_Merge_at_۲۴_۰۴_۲۰۲۳_۰۱_۳۳_بعدازظهر_[Changes]/shelved.patch	(date 1682334826129)
@@ -0,0 +1,567 @@
+Index: src/main/java/org/example/model/gameData/map.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package org.example.model.gameData;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class map {\r\n    int height;\r\n    int weight;\r\n   // ArrayList<Building> buildings = new ArrayList<>();\r\n\r\n    public map(int height, int weight) {\r\n        this.height = height;\r\n        this.weight = weight;\r\n    }\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/main/java/org/example/model/gameData/map.java b/src/main/java/org/example/model/gameData/map.java
+--- a/src/main/java/org/example/model/gameData/map.java	(revision 933c8797cbfd0f34fe73d72994b486c91a2da43f)
++++ b/src/main/java/org/example/model/gameData/map.java	(date 1682330624783)
+@@ -1,14 +1,19 @@
+ package org.example.model.gameData;
+ 
++import org.example.model.tile;
++
+ import java.util.ArrayList;
+ 
+ public class map {
+     int height;
+     int weight;
+-   // ArrayList<Building> buildings = new ArrayList<>();
++     public static tile[][] currentMap = new tile[200][200];
+ 
+-    public map(int height, int weight) {
+-        this.height = height;
+-        this.weight = weight;
++    public static tile[][] getCurrentMap() {
++        return currentMap;
++    }
++    public static tile findATile(int x , int y )
++    {
++         return currentMap[x-1][y-1];
+     }
+ }
+Index: src/main/java/org/example/view/mapMenu.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package org.example.view;\r\n\r\nimport java.util.regex.Matcher;\r\n\r\npublic class mapMenu {\r\n    private void run(Matcher matcher)\r\n    {\r\n        //TODO\r\n        //\r\n        //TODO exit\r\n    }\r\n   /* private map showMap(int x,int y )\r\n    {\r\n\r\n        /*TODO map should be shown 10 up down left right\r\n        s : soldier\r\n        SG : small gatehouse\r\n        BG : big gatehouse\r\n        D : drawBridge\r\n        LT : lookoutTower\r\n        PT : perimeter tower\r\n\r\n/*\r\n\r\n\r\n\r\n        return null;\r\n    }\r\n    private map showDetails(int x ,int y)\r\n    {\r\n        // TODO : only a tile should be shown\r\n        return null;\r\n\r\n    }\r\n    // TODO : have a guide for map tiles\r\n\r\n    private void changeEnvironment(int x, int y)\r\n    {\r\n        //should check\r\n    }*/\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/main/java/org/example/view/mapMenu.java b/src/main/java/org/example/view/mapMenu.java
+--- a/src/main/java/org/example/view/mapMenu.java	(revision 933c8797cbfd0f34fe73d72994b486c91a2da43f)
++++ b/src/main/java/org/example/view/mapMenu.java	(date 1682330624784)
+@@ -1,16 +1,34 @@
+ package org.example.view;
+ 
++import org.example.InputScanner;
++
+ import java.util.regex.Matcher;
+ 
+ public class mapMenu {
+     private void run(Matcher matcher)
+     {
++        String command;
++        InputScanner scanner = new InputScanner();
++        command = scanner.getScanner().nextLine();
++        while (true)
++        {
++            if(mapMenuEnum.getMatcher(command,mapMenuEnum.SHOW_MAP) != null)
++                showMap(Integer.parseInt(matcher.group("xCoordinate"))
++                        , Integer.parseInt(matcher.group("yCoordinate")));
++
++
++
++
++        }
++
+         //TODO
+         //
+         //TODO exit
+     }
+-   /* private map showMap(int x,int y )
++    private static void showMap(int x,int y)
+     {
++
++    }
+ 
+         /*TODO map should be shown 10 up down left right
+         s : soldier
+Index: src/main/java/org/example/controller/mapMenuController.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package org.example.controller;\r\n\r\npublic class mapMenuController {\r\n    private void setTexture(int x , int y,String type)\r\n    {\r\n\r\n    }\r\n    private void setTexture(int x1, int y1,int x2, int y2,String type)\r\n    {\r\n\r\n    }\r\n    private void clear()\r\n    {\r\n\r\n    }\r\n    private void dropRock()\r\n    {\r\n    }\r\n    private void dropUnit(int x , int y, String type)\r\n    {\r\n\r\n    }\r\n    private void dropBuilding(int x , int y)\r\n    {\r\n\r\n    }\r\n    private void dropTree(int x , int y, String type)\r\n    {\r\n\r\n    }\r\n    private void dropRock(int x , int y , char direction)\r\n    {\r\n\r\n    }\r\n    private boolean checkLand(int x , int y)\r\n    {\r\n        return true;\r\n    }\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/main/java/org/example/controller/mapMenuController.java b/src/main/java/org/example/controller/mapMenuController.java
+--- a/src/main/java/org/example/controller/mapMenuController.java	(revision 933c8797cbfd0f34fe73d72994b486c91a2da43f)
++++ b/src/main/java/org/example/controller/mapMenuController.java	(date 1682330624781)
+@@ -1,6 +1,21 @@
+ package org.example.controller;
+ 
+ public class mapMenuController {
++    private void showMap(int x , int y)
++    {
++        tile currentTile = map.getCurrentMap()[x-1][y-1] ;
++        tile[][] mapToShow = new tile[10][10];
++
++
++    }
++
++    /*private String showDetails(int x , int y) {
++        if (map.getCurrentMap()[x - 1][y - 1].getBuilding() == null) {
++            // return map.findATile(x-1 , y-1).
++
++        }
++    }*/
++
+     private void setTexture(int x , int y,String type)
+     {
+ 
+Index: src/main/java/org/example/model/enums/Food.java
+===================================================================
+diff --git a/src/main/java/org/example/model/enums/Food.java b/src/main/java/org/example/model/enums/Food.java
+deleted file mode 100644
+--- a/src/main/java/org/example/model/enums/Food.java	(revision 933c8797cbfd0f34fe73d72994b486c91a2da43f)
++++ /dev/null	(revision 933c8797cbfd0f34fe73d72994b486c91a2da43f)
+@@ -1,12 +0,0 @@
+-package org.example.model.enums;
+-
+-public enum Food {
+-    APPLE,
+-    HOP,
+-    BREAD,
+-    BEAR,
+-    CHEESE,
+-    FLOUR,
+-
+-    ;
+-}
+Index: src/main/java/org/example/model/building/buildingName.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/main/java/org/example/model/building/buildingName.java b/src/main/java/org/example/model/building/buildingName.java
+new file mode 100644
+--- /dev/null	(date 1682330624783)
++++ b/src/main/java/org/example/model/building/buildingName.java	(date 1682330624783)
+@@ -0,0 +1,139 @@
++package org.example.model.building;
++
++import org.example.model.enums.Source;
++import org.example.model.enums.products;
++
++import static org.example.model.enums.products.*;
++
++public enum buildingName {
++    //TODO the rate & capacity & cost should be specified for each building
++    MILL(20, WOOD, 0, null, 1, null, FLOUR, 100),
++    IRON_MINE(20, WOOD, 0, null, 2, IRON, null, 100),
++    QUARRY(20, WOOD, 0, null, 3, ROCK, null, 100),
++    WOODCUTTER(3, WOOD, 0, null, 1, WOOD, null, 100),
++    APPLE_GARDEN(5, WOOD, 0, null, 1, APPLE, null, 100),
++    PITCH_RIG(20 , WOOD , 0 , null , 1 , PITCH , null , 100),
++    HOP_FARM(5, WOOD, 0, null, 1, HOP, null, 100),
++    HUNTING_BUILDING(5, WOOD, 0, null, 1, MEAT, null, 100),
++    WEAT_FARM(15, WOOD, 0, null, 1, WEAT, null, 100),
++    BAKERY(10, WOOD, 0, null, 1, BREAD, null, 100),
++    BEER_MAKING(10, WOOD, 0, null, 1, BEER, null, 100),
++    ARMOURER(100, GOLD_COIN, 20, WOOD, 1, ARMOUR, null, 100),
++    BLACKSMITH(100, GOLD_COIN, 20, WOOD, 1, SWORD, MACE, 100),
++    POLETURNER(100, GOLD_COIN, 20, WOOD, 1, SPEAR, null, 100),
++    FLETCHER(100, GOLD_COIN, 20, WOOD, 1, ARCHE, null, 100),
++    OIL_SMELTLER(10, IRON, 100, GOLD_COIN, 1, OILPOT, null, 100),
++    STABLE(20, WOOD, 400, GOLD_COIN, 0, HORSE, null, 100),
++    ARMOURY(5 , WOOD , 100 ),
++    OX_TETHER( 5 , WOOD , 0 , null ,  1 ),
++    BARRAK(10 , 0 , 15 , ROCK  , 0 , null),
++    ENGINEER_GUILD(10 , 20 , 10 , WOOD , 100 , GOLD_COIN  ),
++    MERCENARY_POST(10 , 0 , 10 , WOOD , 0 , null ),
++    STORE( 5, WOOD , 100 ),
++    FOODSTORE( 5 , WOOD , 100),
++    LOOKOUT_TOWER(100 , 100),
++    PERMETER_TOWER(100 , 100),
++    DEFEND_TURRET(100 , 100),
++    SQUARE_TOWER(100 , 100),
++    CIRCLE_TOWER(100 , 100),
++    SMALL_STONE_GATEHOUSE(0 , null , 8),
++    BIG_STONE_GATEHOUSE(20 , ROCK , 10),
++    HOUSE(6 , WOOD , 0 , null , 0),
++    INN( 5 , 20 , WOOD , 100 , GOLD_COIN ),
++    CHURCH(2 , 250 , GOLD_COIN , 0 , null ),
++    CATHERDAL(2 , 100 , GOLD_COIN , 0 , null),
++    KILLINGPIT( 10 ,6 , WOOD ),
++    CAGED_WAR_DOGS(10 , WOOD , 100 , GOLD_COIN , 0),
++    SIEGE_TENT(0, null , 0 , null , 1),
++    PITCH_DITCH( 2 , PITCH , 0 , null , 0),
++    DRAWBRIDGE(10 , WOOD , 0 , null , 0),
++
++
++
++    ;
++    private int numberOfMaterial1;
++    private int numberOfMaterial2;
++    private products material1Name;
++    private products material2Name;
++    private int numberOfMaterial;
++    private products materialName;
++    private int numberOfWorkers;
++    private products good1;
++    private products good2;
++    private int rate;
++    private int capacity;
++    private int fireRange;
++    private int defendRange;
++    private int popularityRate;
++    private int damage;
++    private int costForEachPerson;
++    private int costForEachPerson2;
++
++
++
++    //productive building
++    buildingName(int numberOfMaterial1, products material1Name, int numberOfMaterial2, products material2Name,
++                 int numberOfWorkers, products good1, products good2, int rate) {
++        this.numberOfMaterial1 = numberOfMaterial1;
++        this.material1Name = material1Name;
++        this.numberOfMaterial2 = numberOfMaterial2;
++        this.material2Name = material2Name;
++        this.numberOfWorkers = numberOfWorkers;
++        this.good1 = good1;
++        this.good2 = good2;
++        this.rate = rate;
++    }
++    //storage building
++    buildingName(int numberOfMaterial , products materialName , int capacity)
++    {
++        this.numberOfMaterial = numberOfMaterial ;
++        this.materialName = materialName ;
++        this.capacity = capacity ;
++
++    }
++    // war buildings
++    buildingName(int fireRange , int defendRange)
++    {
++        this.fireRange =  fireRange;
++        this.defendRange = defendRange;
++    }
++    //city buildings
++    buildingName(int popularityRate,int numberOfMaterial1, products material1Name , int numberOfMaterial2, products material2Name)
++    {
++        this.numberOfMaterial = numberOfMaterial1;
++        this.materialName = material1Name ;
++        this.popularityRate = popularityRate ;
++        this.numberOfMaterial2 = numberOfMaterial2 ;
++        this.material2Name = material2Name ;
++    }
++    buildingName(int damage , int numberOfMaterial , products materialName)
++    {
++        this.damage = damage;
++        this.numberOfMaterial = numberOfMaterial ;
++        this.materialName = materialName ;
++    }
++    buildingName(int numberOfMaterial1 , products material1Name , int numberOfMaterial2 , products material2Name, int numberOfWorkers)
++    {
++        this.numberOfMaterial1 = numberOfMaterial1 ;
++        this.material1Name = material1Name ;
++        this.numberOfMaterial2 = numberOfMaterial2 ;
++        this.material2Name = material2Name ;
++        this.numberOfMaterial2 = numberOfMaterial2 ;
++
++    }
++    //educations
++    buildingName(int costForEachPerson , int costForEachPerson2 , int numberOfMaterial1 , products material1Name,int numberOfMaterial2, products material2Name)
++    {
++        this.costForEachPerson = costForEachPerson;
++        this.costForEachPerson2 = costForEachPerson2 ;
++        this.numberOfMaterial1 = numberOfMaterial1;
++        this.material1Name = material1Name ;
++        this.numberOfMaterial2 = numberOfMaterial2 ;
++        this.material2Name = material2Name ;
++    }
++
++
++
++    }
++
++
+Index: src/main/java/org/example/model/enums/products.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/main/java/org/example/model/enums/products.java b/src/main/java/org/example/model/enums/products.java
+new file mode 100644
+--- /dev/null	(date 1682330624783)
++++ b/src/main/java/org/example/model/enums/products.java	(date 1682330624783)
+@@ -0,0 +1,27 @@
++package org.example.model.enums;
++
++public enum products {
++    APPLE,
++    HOP,
++    BREAD,
++    MEAT,
++    WEAT,
++    BEER,
++    ARMOUR,
++    CHEESE,
++    FLOUR,
++    ROCK,
++    IRON,
++    PITCH,
++    WOOD,
++    VEST,
++    HORSE,
++    GOLD_COIN,
++    SWORD,
++    SPEAR,
++    ARCHE,
++    MACE,
++    OILPOT,
++
++    ;
++}
+Index: src/main/java/org/example/model/tile.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/main/java/org/example/model/tile.java b/src/main/java/org/example/model/tile.java
+new file mode 100644
+--- /dev/null	(date 1682330624783)
++++ b/src/main/java/org/example/model/tile.java	(date 1682330624783)
+@@ -0,0 +1,43 @@
++package org.example.model;
++
++import org.example.model.MBC.Soldier;
++import org.example.model.building.Building;
++
++public class tile {
++    private Building building = null;
++    private LandType landType;
++    private int numberOfSoldiers;
++    private Soldier soldier = null;
++
++    public void setBuilding(Building building) {
++        this.building = building;
++    }
++
++    public void setLandType(LandType landType) {
++        this.landType = landType;
++    }
++
++    public void addToNumberOfSoldiers(int numberOfSoldiers) {
++        this.numberOfSoldiers += numberOfSoldiers;
++    }
++
++    public void setSoldier(Soldier soldier) {
++        this.soldier = soldier;
++    }
++
++    public Building getBuilding() {
++        return building;
++    }
++
++    public LandType getLandType() {
++        return landType;
++    }
++
++    public int getNumberOfSoldiers() {
++        return numberOfSoldiers;
++    }
++
++    public Soldier getSoldier() {
++        return soldier;
++    }
++}
+Index: src/main/java/org/example/view/ProfileMenu.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package org.example.view;\r\n\r\nimport org.example.controller.LoginMenuController;\r\nimport org.example.controller.ProfileMenuController;\r\n\r\nimport java.util.regex.Matcher;\r\n\r\npublic class ProfileMenu extends LoginMenu{\r\n    private final ProfileMenuController profileMenuController;\r\n    public ProfileMenu(LoginMenuController currentUserController) {\r\n        this.profileMenuController = (ProfileMenuController) currentUserController;\r\n    }\r\n    protected void changeUserUsername(Matcher matcher) {\r\n        String username = matcher.group(\"username\");\r\n        System.out.println(profileMenuController.changeUsername(username).getOutput());\r\n    }\r\n\r\n    protected void changeUserPassword(Matcher matcher) {\r\n        String oldPass = matcher.group(\"oldPass\");\r\n        String newPass = matcher.group(\"newPass\");\r\n        System.out.println(profileMenuController.changePassword(oldPass,newPass));\r\n    }\r\n    protected void changeUserNickname(Matcher matcher) {\r\n        String nickName = matcher.group(\"nickname\");\r\n        System.out.println(profileMenuController.changeNickname(nickName));\r\n    }\r\n    protected void changeUserEmail(Matcher matcher) {\r\n        String email = matcher.group(\"email\");\r\n        System.out.println(profileMenuController.changeEmail(email));\r\n    }\r\n    protected void changeUserSlogan(Matcher matcher) {\r\n        String slogan = matcher.group(\"slogan\");\r\n        System.out.println(profileMenuController.changeSlogan(slogan));\r\n    }\r\n\r\n    protected void removeUserSlogan() {\r\n        System.out.println(profileMenuController.removeSlogan());\r\n    }\r\n\r\n    protected void displayUserProfile() {\r\n        profileMenuController.showUserHighestScore();\r\n    }\r\n\r\n    protected void displayUserRank() {\r\n        profileMenuController.showUserRank();\r\n    }\r\n\r\n    protected void displayUserSlogan() {\r\n        profileMenuController.showUserSlogan();\r\n\r\n    }\r\n    protected void displayUserInfo() {\r\n        profileMenuController.showUserProfileDisplay();\r\n    }\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/main/java/org/example/view/ProfileMenu.java b/src/main/java/org/example/view/ProfileMenu.java
+--- a/src/main/java/org/example/view/ProfileMenu.java	(revision 933c8797cbfd0f34fe73d72994b486c91a2da43f)
++++ b/src/main/java/org/example/view/ProfileMenu.java	(date 1682330624784)
+@@ -18,7 +18,7 @@
+     protected void changeUserPassword(Matcher matcher) {
+         String oldPass = matcher.group("oldPass");
+         String newPass = matcher.group("newPass");
+-        System.out.println(profileMenuController.changePassword(oldPass,newPass));
++        //System.out.println(profileMenuController.changePassword(oldPass,newPass));
+     }
+     protected void changeUserNickname(Matcher matcher) {
+         String nickName = matcher.group("nickname");
+@@ -33,9 +33,9 @@
+         System.out.println(profileMenuController.changeSlogan(slogan));
+     }
+ 
+-    protected void removeUserSlogan() {
++   /* protected void removeUserSlogan() {
+         System.out.println(profileMenuController.removeSlogan());
+-    }
++    }*/
+ 
+     protected void displayUserProfile() {
+         profileMenuController.showUserHighestScore();
+Index: src/main/java/org/example/model/building/Storage.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package org.example.model.building;\r\n\r\nimport org.example.model.enums.Source;\r\npublic class Storage extends Building{\r\n    private int capacity;\r\n    private final Source sourceType;\r\n\r\n    public Storage(int hp, int width, int height, int buildingCost, int capacity, Source sourceType) {\r\n        super(hp, width, height, buildingCost);\r\n        this.capacity = capacity;\r\n        this.sourceType = sourceType;\r\n    }\r\n\r\n    public int showCapacity() {\r\n        return capacity;\r\n    }\r\n\r\n    public void changingCapacity(int capacity,int flag) {\r\n        if (flag==1) {\r\n            this.capacity+=capacity;\r\n            return;\r\n        }\r\n        this.capacity-=capacity;\r\n    }\r\n\r\n    public Source getSourceType() {\r\n        return sourceType;\r\n    }\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/main/java/org/example/model/building/Storage.java b/src/main/java/org/example/model/building/Storage.java
+--- a/src/main/java/org/example/model/building/Storage.java	(revision 933c8797cbfd0f34fe73d72994b486c91a2da43f)
++++ b/src/main/java/org/example/model/building/Storage.java	(date 1682330624782)
+@@ -1,14 +1,16 @@
+ package org.example.model.building;
+ 
+ import org.example.model.enums.Source;
++import org.example.model.enums.products;
++
+ public class Storage extends Building{
+     private int capacity;
+-    private final Source sourceType;
++    private final products good;
+ 
+-    public Storage(int hp, int width, int height, int buildingCost, int capacity, Source sourceType) {
++    public Storage(int hp, int width, int height, int buildingCost, int capacity, products good) {
+         super(hp, width, height, buildingCost);
+         this.capacity = capacity;
+-        this.sourceType = sourceType;
++        this.good = good;
+     }
+ 
+     public int showCapacity() {
+@@ -23,7 +25,7 @@
+         this.capacity-=capacity;
+     }
+ 
+-    public Source getSourceType() {
+-        return sourceType;
++    public products getGood() {
++        return good;
+     }
+ }
+Index: src/main/java/org/example/model/building/ProductiveBuilding.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package org.example.model.building;\r\n\r\nimport org.example.model.interfaces.produce;\r\nimport org.example.model.enums.Source;\r\n\r\npublic class ProductiveBuilding extends Building implements produce {\r\n    private final int rate;\r\n    private boolean needMaterial;\r\n    private final Source product;\r\n\r\n    public ProductiveBuilding(int hp, int width, int height, int buildingCost, int rate,boolean needMaterial, Source product) {\r\n        super(hp, width, height, buildingCost);\r\n        this.rate = rate;\r\n        this.needMaterial = needMaterial;\r\n        this.product = product;\r\n    }\r\n\r\n    public Source getProduct() {\r\n        return product;\r\n    }\r\n\r\n    public int getRate() {\r\n        return rate;\r\n    }\r\n    @Override\r\n    public void production() {\r\n        //TODO:\r\n    }\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/main/java/org/example/model/building/ProductiveBuilding.java b/src/main/java/org/example/model/building/ProductiveBuilding.java
+--- a/src/main/java/org/example/model/building/ProductiveBuilding.java	(revision 933c8797cbfd0f34fe73d72994b486c91a2da43f)
++++ b/src/main/java/org/example/model/building/ProductiveBuilding.java	(date 1682330624782)
+@@ -1,21 +1,22 @@
+ package org.example.model.building;
+ 
++import org.example.model.enums.products;
+ import org.example.model.interfaces.produce;
+ import org.example.model.enums.Source;
+ 
+ public class ProductiveBuilding extends Building implements produce {
+     private final int rate;
+     private boolean needMaterial;
+-    private final Source product;
++    private final products product;
+ 
+-    public ProductiveBuilding(int hp, int width, int height, int buildingCost, int rate,boolean needMaterial, Source product) {
++    public ProductiveBuilding(int hp, int width, int height, int buildingCost, int rate,boolean needMaterial, products product) {
+         super(hp, width, height, buildingCost);
+         this.rate = rate;
+         this.needMaterial = needMaterial;
+         this.product = product;
+     }
+ 
+-    public Source getProduct() {
++    public products getProduct() {
+         return product;
+     }
+ 
+Index: src/main/java/org/example/controller/mapChangesMenuController.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package org.example.controller;\r\n\r\npublic class mapChangesMenuController {\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/main/java/org/example/controller/mapChangesMenuController.java b/src/main/java/org/example/controller/mapChangesMenuController.java
+--- a/src/main/java/org/example/controller/mapChangesMenuController.java	(revision 933c8797cbfd0f34fe73d72994b486c91a2da43f)
++++ b/src/main/java/org/example/controller/mapChangesMenuController.java	(date 1682330624781)
+@@ -1,4 +1,5 @@
+ package org.example.controller;
+ 
+ public class mapChangesMenuController {
++
+ }
+Index: src/main/java/org/example/model/building/Market.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package org.example.model.building;\r\n\r\nimport java.util.ArrayList;\r\nimport org.example.model.enums.*;\r\npublic class Market extends Building{\r\n    private ArrayList<Food> userFoods;\r\n    private ArrayList<Source> userSources;\r\n    private ArrayList<Weapon> userWeapons;\r\n\r\n    public Market(int hp, int width, int height, int buildingCost) {\r\n        super(hp, width, height, buildingCost);\r\n        this.userFoods = new ArrayList<>();\r\n        this.userSources = new ArrayList<>();\r\n        this.userWeapons = new ArrayList<>();\r\n    }\r\n\r\n    public ArrayList<Food> getUserFoods() {\r\n        return userFoods;\r\n    }\r\n\r\n    public ArrayList<Source> getUserSources() {\r\n        return userSources;\r\n    }\r\n\r\n    public ArrayList<Weapon> getUserWeapons() {\r\n        return userWeapons;\r\n    }\r\n\r\n    public void showUserFoodsAmount() {\r\n        System.out.println(getUserFoods().size());\r\n    }\r\n\r\n    public void showUsersourcesAmount() {\r\n        System.out.println(getUserSources().size());\r\n    }\r\n\r\n    public void showUserWeaponsAmount() {\r\n        System.out.println(getUserWeapons().size());\r\n    }\r\n\r\n    public void buyItem(String item) {\r\n        //TODO:\r\n    }\r\n\r\n    public void sellItem(String item) {\r\n        //TODO:\r\n    }\r\n\r\n    public void showStoreInventory() {\r\n        //TODO:\r\n        return;\r\n    }\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/main/java/org/example/model/building/Market.java b/src/main/java/org/example/model/building/Market.java
+--- a/src/main/java/org/example/model/building/Market.java	(revision 933c8797cbfd0f34fe73d72994b486c91a2da43f)
++++ b/src/main/java/org/example/model/building/Market.java	(date 1682330624782)
+@@ -3,7 +3,7 @@
+ import java.util.ArrayList;
+ import org.example.model.enums.*;
+ public class Market extends Building{
+-    private ArrayList<Food> userFoods;
++    private ArrayList<products> userFoods;
+     private ArrayList<Source> userSources;
+     private ArrayList<Weapon> userWeapons;
+ 
+@@ -14,7 +14,7 @@
+         this.userWeapons = new ArrayList<>();
+     }
+ 
+-    public ArrayList<Food> getUserFoods() {
++    public ArrayList<products> getUserFoods() {
+         return userFoods;
+     }
+ 
+Index: src/main/java/org/example/model/building/CityBuilding.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package org.example.model.building;\r\n\r\n\r\npublic class CityBuilding extends Building{\r\n    private final int capacity;\r\n\r\n    public CityBuilding(int hp, int width, int height, int buildingCost, int capacity) {\r\n        super(hp, width, height, buildingCost);\r\n        this.capacity = capacity;\r\n    }\r\n\r\n    public int getCapacity() {\r\n        return capacity;\r\n    }\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/main/java/org/example/model/building/CityBuilding.java b/src/main/java/org/example/model/building/CityBuilding.java
+--- a/src/main/java/org/example/model/building/CityBuilding.java	(revision 933c8797cbfd0f34fe73d72994b486c91a2da43f)
++++ b/src/main/java/org/example/model/building/CityBuilding.java	(date 1682330624782)
+@@ -2,14 +2,14 @@
+ 
+ 
+ public class CityBuilding extends Building{
+-    private final int capacity;
++    private final int peopleCapacity;
+ 
+     public CityBuilding(int hp, int width, int height, int buildingCost, int capacity) {
+         super(hp, width, height, buildingCost);
+-        this.capacity = capacity;
++        this.peopleCapacity = capacity;
+     }
+ 
+     public int getCapacity() {
+-        return capacity;
++        return peopleCapacity;
+     }
+ }
+Index: src/main/java/org/example/model/building/Building.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package org.example.model.building;\r\n\r\n\r\nimport org.example.model.MBC.Person;\r\n\r\npublic class Building {\r\n    private final int hp;\r\n    private int width;\r\n    private int height;\r\n    private final int buildingCost;\r\n    private Person worker;\r\n\r\n    public Building(int hp, int width, int height, int buildingCost) {\r\n        this.hp = hp;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.buildingCost = buildingCost;\r\n    }\r\n\r\n    public int getHp() {\r\n        return hp;\r\n    }\r\n\r\n    public int getWidth() {\r\n        return width;\r\n    }\r\n\r\n    public int getHeight() {\r\n        return height;\r\n    }\r\n\r\n    public int getBuildingCost() {\r\n        return buildingCost;\r\n    }\r\n\r\n    public Person getWorker() {\r\n        return worker;\r\n    }\r\n\r\n    public void setPosition(int width,int height) {\r\n        this.height = height;\r\n        this.width = width;\r\n    }\r\n}\r\n
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/src/main/java/org/example/model/building/Building.java b/src/main/java/org/example/model/building/Building.java
+--- a/src/main/java/org/example/model/building/Building.java	(revision 933c8797cbfd0f34fe73d72994b486c91a2da43f)
++++ b/src/main/java/org/example/model/building/Building.java	(date 1682330624781)
+@@ -2,6 +2,7 @@
+ 
+ 
+ import org.example.model.MBC.Person;
++import org.example.model.tile;
+ 
+ public class Building {
+     private final int hp;
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_۲۴_۰۴_۲۰۲۳_۰۱_۲۹_بعدازظهر_[Changes]/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_۲۴_۰۴_۲۰۲۳_۰۱_۲۹_بعدازظهر_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_۲۴_۰۴_۲۰۲۳_۰۱_۲۹_بعدازظهر_[Changes]/shelved.patch
new file mode 100644
--- /dev/null	(date 1682334826127)
+++ b/.idea/shelf/Uncommitted_changes_before_Checkout_at_۲۴_۰۴_۲۰۲۳_۰۱_۲۹_بعدازظهر_[Changes]/shelved.patch	(date 1682334826127)
@@ -0,0 +1,19 @@
+Index: .idea/workspace.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"4908046b-a59d-480a-b0ae-14605eb14fdd\" name=\"Changes\" comment=\"profile menu almost completed!\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n    <option name=\"SWAP_SIDES_IN_COMPARE_BRANCHES\" value=\"true\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2OdNK38UNz2OrnIqCzmN0SMvyKl\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;diff.external&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  },\r\n  &quot;keyToStringList&quot;: {\r\n    &quot;ChangesTree.GroupingKeys&quot;: [\r\n      &quot;module&quot;,\r\n      &quot;directory&quot;\r\n    ]\r\n  }\r\n}</component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"4908046b-a59d-480a-b0ae-14605eb14fdd\" name=\"Changes\" comment=\"\" />\r\n      <created>1681886432173</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1681886432173</updated>\r\n      <workItem from=\"1681886433354\" duration=\"78000\" />\r\n      <workItem from=\"1681886686257\" duration=\"2512000\" />\r\n      <workItem from=\"1682084994720\" duration=\"4517000\" />\r\n      <workItem from=\"1682091000420\" duration=\"2004000\" />\r\n      <workItem from=\"1682105082710\" duration=\"1183000\" />\r\n    </task>\r\n    <task id=\"LOCAL\u200E−۰۰۰۰۱\" summary=\"creating files...\">\r\n      <created>1681886768892</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E−۰۰۰۰۱\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E−۰۰۰۰۱\" />\r\n      <updated>1681886768892</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E−۰۰۰۰۲\" summary=\"creating files...\">\r\n      <created>1682085187908</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E−۰۰۰۰۲\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E−۰۰۰۰۲\" />\r\n      <updated>1682085187908</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E−۰۰۰۰۳\" summary=\"creating files...\">\r\n      <created>1682085989441</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E−۰۰۰۰۳\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E−۰۰۰۰۳\" />\r\n      <updated>1682085989441</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E−۰۰۰۰۴\" summary=\"creating files...\">\r\n      <created>1682089936428</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E−۰۰۰۰۴\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E−۰۰۰۰۴\" />\r\n      <updated>1682089936428</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E−۰۰۰۰۵\" summary=\"completing login menu...\">\r\n      <created>1682099652881</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E−۰۰۰۰۵\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E−۰۰۰۰۵\" />\r\n      <updated>1682099652881</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E−۰۰۰۰۶\" summary=\"completing login menu...\">\r\n      <created>1682100394229</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E−۰۰۰۰۶\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E−۰۰۰۰۶\" />\r\n      <updated>1682100394229</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E−۰۰۰۰۷\" summary=\"completing profile menu &#10;login menu completed!\">\r\n      <created>1682103950903</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E−۰۰۰۰۷\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E−۰۰۰۰۷\" />\r\n      <updated>1682103950903</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E−۰۰۰۰۸\" summary=\"profile menu almost completed!\">\r\n      <created>1682105361256</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E−۰۰۰۰۸\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E−۰۰۰۰۸\" />\r\n      <updated>1682105361256</updated>\r\n    </task>\r\n    <task id=\"LOCAL\u200E−۰۰۰۰۹\" summary=\"profile menu almost completed!\">\r\n      <created>1682105632142</created>\r\n      <option name=\"number\" value=\"LOCAL\u200E−۰۰۰۰۹\" />\r\n      <option name=\"presentableId\" value=\"LOCAL\u200E−۰۰۰۰۹\" />\r\n      <updated>1682105632142</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"10\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"main\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"creating files...\" />\r\n    <MESSAGE value=\"completing login menu...\" />\r\n    <MESSAGE value=\"completing profile menu &#10;login menu completed!\" />\r\n    <MESSAGE value=\"profile menu almost completed!\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"profile menu almost completed!\" />\r\n  </component>\r\n</project>
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+diff --git a/.idea/workspace.xml b/.idea/workspace.xml
+--- a/.idea/workspace.xml	
++++ b/.idea/workspace.xml	
+@@ -4,7 +4,7 @@
+     <option name="autoReloadType" value="SELECTIVE" />
+   </component>
+   <component name="ChangeListManager">
+-    <list default="true" id="4908046b-a59d-480a-b0ae-14605eb14fdd" name="Changes" comment="profile menu almost completed!" />
++    <list default="true" id="4908046b-a59d-480a-b0ae-14605eb14fdd" name="Changes" comment="working on scanner" />
+     <option name="SHOW_DIALOG" value="false" />
+     <option name="HIGHLIGHT_CONFLICTS" value="true" />
+     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at_۲۴_۰۴_۲۰۲۳_۰۱_۳۱_بعدازظهر_[Changes]/shelved.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_۲۴_۰۴_۲۰۲۳_۰۱_۳۱_بعدازظهر_[Changes]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_۲۴_۰۴_۲۰۲۳_۰۱_۳۱_بعدازظهر_[Changes]/shelved.patch
new file mode 100644
--- /dev/null	(date 1682334826127)
+++ b/.idea/shelf/Uncommitted_changes_before_Checkout_at_۲۴_۰۴_۲۰۲۳_۰۱_۳۱_بعدازظهر_[Changes]/shelved.patch	(date 1682334826127)
@@ -0,0 +1,32 @@
+Index: src/main/java/org/example/model/LandType.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package org.example.model;\r\n\r\npublic class LandType {\r\n}\r\n
+===================================================================
+diff --git a/src/main/java/org/example/model/LandType.java b/src/main/java/org/example/model/LandType.java
+--- a/src/main/java/org/example/model/LandType.java	
++++ b/src/main/java/org/example/model/LandType.java	
+@@ -1,4 +1,6 @@
+ package org.example.model;
+ 
+ public class LandType {
++    //private String name = ;
++
+ }
+Index: src/main/java/org/example/view/enums/commands/mapMenuEnum.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
+<+>package org.example.view.enums.commands;\r\n\r\n\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n\r\npublic enum mapMenuEnum {\r\n\r\n\r\n    SHOW_MAP(\"^\\\\s+show\\\\s+map\\\\s+-x\\\\s+-y\\\\s*\"),\r\n    SHOW_MAP_DETAILS(\"\\\\s*show\\\\s+details\\\\s+-x\\\\s+-y\\\\s*\");\r\n    private final String regex;\r\n    mapMenuEnum(String regex)\r\n    {\r\n        this.regex = regex ;\r\n    }\r\n    public static Matcher getMatcher(String input,mapMenuEnum regex)\r\n    {\r\n        Matcher matcher = Pattern.compile(regex.regex,Pattern.CASE_INSENSITIVE).matcher(input);\r\n        return matcher.matches() ? matcher : null ;\r\n    }\r\n\r\n}\r\n
+===================================================================
+diff --git a/src/main/java/org/example/view/enums/commands/mapMenuEnum.java b/src/main/java/org/example/view/enums/commands/mapMenuEnum.java
+--- a/src/main/java/org/example/view/enums/commands/mapMenuEnum.java	
++++ b/src/main/java/org/example/view/enums/commands/mapMenuEnum.java	
+@@ -7,7 +7,7 @@
+ public enum mapMenuEnum {
+ 
+ 
+-    SHOW_MAP("^\\s+show\\s+map\\s+-x\\s+-y\\s*"),
++    SHOW_MAP("^\\s+show\\s+map\\s+-x(?<xCoordinate>[\\d+])\\s+-y(?<yCoordinate>[\\d+])\\s*"),
+     SHOW_MAP_DETAILS("\\s*show\\s+details\\s+-x\\s+-y\\s*");
+     private final String regex;
+     mapMenuEnum(String regex)
Index: src/main/java/org/example/model/MBC/InfantryUnit.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.model.MBC;\r\n\r\nimport org.example.model.MBC.Soldier;\r\nimport org.example.model.enums.UnitName;\r\n\r\npublic class InfantryUnit extends Soldier {\r\n    public UnitName name;\r\n    public int maxMove;\r\n    public int speed;\r\n    public int attackingPower;\r\n    public int deffense;\r\n\r\n    private void setSpeed(int speed){\r\n        this.speed = speed;\r\n    }\r\n\r\n    private void setAttackingPower(int attackingPower){\r\n        this.attackingPower = attackingPower;\r\n    }\r\n\r\n    private void setDeffense(int deffense){\r\n        this.deffense = deffense;\r\n    }\r\n\r\n    private int getSpeed(){\r\n        return this.speed;\r\n    }\r\n\r\n    private int getAttackingPower(){\r\n        return this.attackingPower;\r\n    }\r\n\r\n    private int getDeffense(){\r\n        return this.deffense;\r\n    }\r\n    public void setName(UnitName name){\r\n        this.name = name;\r\n    }\r\n\r\n    public UnitName getName(){\r\n        return this.name;\r\n    }\r\n\r\n    private void pikemen(){\r\n        this.name = UnitName.PIKEMEN;\r\n        this.maxMove = 1;\r\n    }\r\n\r\n    private void swordsmen(){\r\n        this.name = UnitName.SWORDSMEN;\r\n        this.maxMove = 1;\r\n    }\r\n\r\n    private void knigth(){\r\n        this.name = UnitName.KNIGHT;\r\n        this.maxMove = 4;\r\n    }\r\n\r\n    private void engineer(){\r\n        this.name = UnitName.ENGINEER;\r\n        this.maxMove = 2;\r\n    }\r\n\r\n    private void blackMonk(){\r\n        this.name = UnitName.BLACK_MONK;\r\n        this.maxMove = 1;\r\n    }\r\n\r\n    private void slaves(){\r\n        this.name = UnitName.SLAVES;\r\n        this.maxMove = 3;\r\n    }\r\n\r\n    private void arabianSwordsmen(){\r\n        this.name = UnitName.ARABIAN_SWORDSMEN;\r\n        this.maxMove = 4;\r\n    }\r\n\r\n    private int getMaxMove(){\r\n        return this.maxMove;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/model/MBC/InfantryUnit.java b/src/main/java/org/example/model/MBC/InfantryUnit.java
--- a/src/main/java/org/example/model/MBC/InfantryUnit.java	(revision 654ee3a971821e5edc158f9b7911dce66bfc5f52)
+++ b/src/main/java/org/example/model/MBC/InfantryUnit.java	(date 1682334826133)
@@ -43,40 +43,52 @@
 
     private void pikemen(){
         this.name = UnitName.PIKEMEN;
-        this.maxMove = 1;
     }
 
     private void swordsmen(){
         this.name = UnitName.SWORDSMEN;
-        this.maxMove = 1;
     }
 
     private void knigth(){
         this.name = UnitName.KNIGHT;
-        this.maxMove = 4;
     }
 
     private void engineer(){
         this.name = UnitName.ENGINEER;
-        this.maxMove = 2;
     }
 
     private void blackMonk(){
         this.name = UnitName.BLACK_MONK;
-        this.maxMove = 1;
     }
 
     private void slaves(){
         this.name = UnitName.SLAVES;
-        this.maxMove = 3;
     }
 
     private void arabianSwordsmen(){
         this.name = UnitName.ARABIAN_SWORDSMEN;
-        this.maxMove = 4;
     }
 
-    private int getMaxMove(){
+    public void setMaxMove(UnitName name){
+        switch (name){
+            case PIKEMEN: this.maxMove = 1;
+            break;
+            case SWORDSMEN: this.maxMove = 1;
+            break;
+            case KNIGHT: this.maxMove = 4;
+            break;
+            case ENGINEER: this.maxMove = 2;
+            break;
+            case BLACK_MONK: this.maxMove = 1;
+            break;
+            case SLAVES: this.maxMove = 3;
+            break;
+            case ARABIAN_SWORDSMEN: this.maxMove = 4;
+            break;
+        }
+    }
+
+    public int getMaxMove(){
         return this.maxMove;
     }
 }
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at________Changes_4.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at________Changes_4.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at________Changes_4.xml
new file mode 100644
--- /dev/null	(date 1682334826126)
+++ b/.idea/shelf/Uncommitted_changes_before_Checkout_at________Changes_4.xml	(date 1682334826126)
@@ -0,0 +1,4 @@
+<changelist name="Uncommitted_changes_before_Checkout_at_۲۴_۰۴_۲۰۲۳_۰۱_۳۱_بعدازظهر_[Changes]" date="1682330472027" recycled="false" toDelete="true">
+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_۲۴_۰۴_۲۰۲۳_۰۱_۳۱_بعدازظهر_[Changes]/shelved.patch" />
+  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at ۲۴/۰۴/۲۰۲۳ ۰۱:۳۱ بعدازظهر [Changes]" />
+</changelist>
\ No newline at end of file
Index: src/main/java/org/example/model/MBC/LauncherUnit.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.model.MBC;\r\n\r\nimport org.example.model.MBC.Soldier;\r\nimport org.example.model.enums.UnitName;\r\n\r\npublic class LauncherUnit extends Soldier {\r\n    public UnitName name;\r\n    public int maxMove;\r\n    public int throwrange;\r\n    public int speed;\r\n    public int attackingPower;\r\n    public int deffense;\r\n\r\n    private void setSpeed(int speed){\r\n        this.speed = speed;\r\n    }\r\n\r\n    private void setAttackingPower(int attackingPower){\r\n        this.attackingPower = attackingPower;\r\n    }\r\n\r\n    private void setDeffense(int deffense){\r\n        this.deffense = deffense;\r\n    }\r\n\r\n    private int getSpeed(){\r\n        return this.speed;\r\n    }\r\n\r\n    private int getAttackingPower(int attackingPower){\r\n        return this.attackingPower;\r\n    }\r\n\r\n    private int getDeffense(int deffense){\r\n        return this.deffense;\r\n    }\r\n    public UnitName getName() {\r\n        return name;\r\n    }\r\n\r\n    public void setName(UnitName name) {\r\n        this.name = name;\r\n    }\r\n\r\n    private void archer(){\r\n        this.name = UnitName.ARCHER;\r\n        this.maxMove = 3;\r\n        this.throwrange = 2;\r\n    }\r\n\r\n    private void crossbowmen(){\r\n        this.name = UnitName.CROSSBOWMEN;\r\n        this.maxMove = 1;\r\n        this.throwrange = 2;\r\n    }\r\n\r\n    private void arrcherBow(){\r\n        this.name = UnitName.ARCHERBOW;\r\n        this.maxMove = 3;\r\n        this.throwrange = 2;\r\n    }\r\n\r\n    private void slingers(){\r\n        this.name = UnitName.SLINGERS;\r\n        this.maxMove = 3;\r\n        this.throwrange = 2;\r\n    }\r\n\r\n    private void horseArchers(){\r\n        this.name = UnitName.HORSE_ARCHERS;\r\n        this.maxMove = 4;\r\n        this.throwrange = 2;\r\n    }\r\n\r\n    private void firethrowers(){\r\n        this.name = UnitName.FIRE_THROWERS;\r\n        this.maxMove = 4;\r\n        this.throwrange = 3;\r\n    }\r\n\r\n    public void setMove(UnitName name){\r\n        switch (name){\r\n            case ARCHER : this.maxMove = 3;\r\n            break;\r\n            case ARCHERBOW: this.maxMove = 3;\r\n            break;\r\n            case CROSSBOWMEN: this.maxMove = 1;\r\n            break;\r\n            case SLINGERS: this.maxMove = 3;\r\n            break;\r\n            case HORSE_ARCHERS: this.maxMove = 4;\r\n            break;\r\n            case FIRE_THROWERS: this.maxMove = 4;\r\n            break;\r\n        }\r\n    }\r\n\r\n    private int getThrowrange(){\r\n        return throwrange;\r\n    }\r\n\r\n    public int getMaxMove(){\r\n        return this.maxMove;\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/model/MBC/LauncherUnit.java b/src/main/java/org/example/model/MBC/LauncherUnit.java
--- a/src/main/java/org/example/model/MBC/LauncherUnit.java	(revision 654ee3a971821e5edc158f9b7911dce66bfc5f52)
+++ b/src/main/java/org/example/model/MBC/LauncherUnit.java	(date 1682334826134)
@@ -44,38 +44,26 @@
 
     private void archer(){
         this.name = UnitName.ARCHER;
-        this.maxMove = 3;
-        this.throwrange = 2;
     }
 
     private void crossbowmen(){
         this.name = UnitName.CROSSBOWMEN;
-        this.maxMove = 1;
-        this.throwrange = 2;
     }
 
     private void arrcherBow(){
         this.name = UnitName.ARCHERBOW;
-        this.maxMove = 3;
-        this.throwrange = 2;
     }
 
     private void slingers(){
         this.name = UnitName.SLINGERS;
-        this.maxMove = 3;
-        this.throwrange = 2;
     }
 
     private void horseArchers(){
         this.name = UnitName.HORSE_ARCHERS;
-        this.maxMove = 4;
-        this.throwrange = 2;
     }
 
     private void firethrowers(){
         this.name = UnitName.FIRE_THROWERS;
-        this.maxMove = 4;
-        this.throwrange = 3;
     }
 
     public void setMove(UnitName name){
@@ -95,8 +83,25 @@
         }
     }
 
-    private int getThrowrange(){
-        return throwrange;
+    public void setThrowRange(UnitName name){
+        switch (name){
+            case ARCHER : this.throwrange = 2;
+            break;
+            case ARCHERBOW: this.throwrange = 2;
+            break;
+            case CROSSBOWMEN: this.throwrange = 2;
+            break;
+            case SLINGERS: this.throwrange = 2;
+            break;
+            case HORSE_ARCHERS: this.throwrange = 2;
+            break;
+            case FIRE_THROWERS: this.throwrange = 3;
+            break;
+        }
+    }
+
+    private int getThrowRange(){
+        return this.throwrange;
     }
 
     public int getMaxMove(){
Index: src/main/java/org/example/model/MBC/UnitWallTarget.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.model.MBC;\r\n\r\nimport org.example.model.MBC.Soldier;\r\nimport org.example.model.enums.UnitName;\r\n\r\npublic class UnitWallTarget extends Soldier {\r\n    public UnitName name;\r\n    public int maxMove;\r\n    public int speed;\r\n    public int attackingPower;\r\n    public int deffense;\r\n\r\n    private void setSpeed(int speed){\r\n        this.speed = speed;\r\n    }\r\n\r\n    private void setattackingPower(int attackingPower){\r\n        this.attackingPower = attackingPower;\r\n    }\r\n\r\n    private void setDeffense(int deffense){\r\n        this.deffense = deffense;\r\n    }\r\n\r\n    private int getSpeed(){\r\n        return this.speed;\r\n    }\r\n\r\n    private int getAttackingPower(){\r\n        return this.attackingPower;\r\n    }\r\n\r\n    private int getDeffense(){\r\n        return this.deffense;\r\n    }\r\n    public void setName(UnitName name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public UnitName getName() {\r\n        return name;\r\n    }\r\n\r\n    private void spearmen(){\r\n        this.name = UnitName.SPEARMEN;\r\n        this.maxMove = 2;\r\n    }\r\n\r\n    private void macemen(){\r\n        this.name = UnitName.MACEMEN;\r\n        this.maxMove = 2;\r\n    }\r\n\r\n    private void tunneler(){\r\n        this.name = UnitName.TUNNELER;\r\n        this.maxMove = 3;\r\n    }\r\n\r\n    private void laddermen(){\r\n        this.name = UnitName.LADDERMEN;\r\n        this.maxMove = 3;\r\n    }\r\n\r\n    private void assassins(){\r\n        this.name = UnitName.ASSASSINS;\r\n        this.maxMove = 2;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/model/MBC/UnitWallTarget.java b/src/main/java/org/example/model/MBC/UnitWallTarget.java
--- a/src/main/java/org/example/model/MBC/UnitWallTarget.java	(revision 654ee3a971821e5edc158f9b7911dce66bfc5f52)
+++ b/src/main/java/org/example/model/MBC/UnitWallTarget.java	(date 1682334826134)
@@ -43,26 +43,40 @@
 
     private void spearmen(){
         this.name = UnitName.SPEARMEN;
-        this.maxMove = 2;
     }
 
     private void macemen(){
         this.name = UnitName.MACEMEN;
-        this.maxMove = 2;
     }
 
     private void tunneler(){
         this.name = UnitName.TUNNELER;
-        this.maxMove = 3;
     }
 
     private void laddermen(){
         this.name = UnitName.LADDERMEN;
-        this.maxMove = 3;
     }
 
     private void assassins(){
         this.name = UnitName.ASSASSINS;
-        this.maxMove = 2;
+    }
+
+    public void setMaxMove(UnitName name){
+        switch (name){
+            case SPEARMEN: this.maxMove = 2;
+            break;
+            case MACEMEN: this.maxMove = 2;
+            break;
+            case TUNNELER: this.maxMove = 3;
+            break;
+            case LADDERMEN: this.maxMove = 3;
+            break;
+            case ASSASSINS: this.maxMove = 2;
+            break;
+        }
+    }
+
+    public int getMaxMove(){
+        return this.maxMove;
     }
 }
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at________Changes_12.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at________Changes_12.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at________Changes_12.xml
new file mode 100644
--- /dev/null	(date 1682334826126)
+++ b/.idea/shelf/Uncommitted_changes_before_Checkout_at________Changes_12.xml	(date 1682334826126)
@@ -0,0 +1,4 @@
+<changelist name="Uncommitted_changes_before_Checkout_at_۲۴_۰۴_۲۰۲۳_۰۱_۳۱_بعدازظهر_[Changes]1" date="1682330550959" recycled="true" deleted="true">
+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_۲۴_۰۴_۲۰۲۳_۰۱_۳۱_بعدازظهر_[Changes]1/shelved.patch" />
+  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at ۲۴/۰۴/۲۰۲۳ ۰۱:۳۱ بعدازظهر [Changes]" />
+</changelist>
\ No newline at end of file
Index: src/main/java/org/example/model/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.model;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class User {\r\n    private String username;\r\n    private String password;\r\n    private String nickname;\r\n    private String email;\r\n    private String passRecoveryQuestion;\r\n    private String passRecoveryAnswer;\r\n    private int score;\r\n    private int rank;\r\n    private String slogan;\r\n    public static final ArrayList<User> allUsers = new ArrayList<>();\r\n\r\n    private void User(String username,String password,String nickname,String email){\r\n        this.username = username;\r\n        this.password = password;\r\n        this.nickname = nickname;\r\n        this.email = email;\r\n    }\r\n\r\n    private void User(String username,String password,String nickname,String email,String slogan){\r\n        this.username = username;\r\n        this.password = password;\r\n        this.nickname = nickname;\r\n        this.email = email;\r\n        this.slogan = slogan;\r\n        this.addUser();\r\n    }\r\n    public ArrayList<User> getAllUsers() {\r\n        return allUsers;\r\n    }\r\n    public void addUser() {\r\n        allUsers.add(this);\r\n    }\r\n    public void setRank(int rank) {\r\n        this.rank = rank;\r\n    }\r\n\r\n    public void setScore(int score) {\r\n        this.score = score;\r\n    }\r\n\r\n    public String getUsername(){\r\n        return this.username;\r\n    }\r\n\r\n    public String getPassword(){\r\n        return this.password;\r\n    }\r\n\r\n    public String getNickname(){\r\n        return this.nickname;\r\n    }\r\n\r\n    public String getEmail(){\r\n        return this.email;\r\n    }\r\n\r\n    public String getSlogan(){\r\n        return this.slogan;\r\n    }\r\n\r\n    public int getRank(){\r\n        return this.rank;\r\n    }\r\n\r\n    public int getScore(){\r\n        return this.score;\r\n    }\r\n\r\n    public void setPassword(String password){\r\n        this.password = password;\r\n    }\r\n\r\n    public void setUsername(String username){\r\n        this.username = username;\r\n    }\r\n\r\n    public void setNickname(String nickname){\r\n        this.nickname = nickname;\r\n    }\r\n\r\n    public void setEmail(String email){\r\n        this.email = email;\r\n    }\r\n\r\n    public void setSlogan(String slogan){\r\n        this.slogan = slogan;\r\n    }\r\n\r\n    public void setPassRecoveryQuestion(String passRecoveryQuestion){\r\n        this.passRecoveryQuestion = passRecoveryQuestion;\r\n    }\r\n\r\n    public void setPassRecoveryAnswer(String passRecoveryAnswer){\r\n        this.passRecoveryAnswer = passRecoveryAnswer;\r\n    }\r\n\r\n    public String getPassRecoveryQuestion(){\r\n        return this.passRecoveryQuestion;\r\n    }\r\n\r\n    public String getPassRecoveryAnswer(){\r\n        return this.passRecoveryAnswer;\r\n    }\r\n\r\n    public static User findUserWithPass(String password) {\r\n        for (User user:User.allUsers) {\r\n            if (user.getPassword().equals(password))\r\n                return user;\r\n        }\r\n        return null;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/model/User.java b/src/main/java/org/example/model/User.java
--- a/src/main/java/org/example/model/User.java	(revision 654ee3a971821e5edc158f9b7911dce66bfc5f52)
+++ b/src/main/java/org/example/model/User.java	(date 1682334826135)
@@ -14,14 +14,18 @@
     private String slogan;
     public static final ArrayList<User> allUsers = new ArrayList<>();
 
-    private void User(String username,String password,String nickname,String email){
+    public User(String username, String password, String nickname, String email) {
         this.username = username;
         this.password = password;
         this.nickname = nickname;
+        this.passRecoveryAnswer = null;
+        this.passRecoveryQuestion = null;
+        this.score = 0;
         this.email = email;
+        this.addUser();
     }
 
-    private void User(String username,String password,String nickname,String email,String slogan){
+    public User(String username, String password, String nickname, String email, String slogan) {
         this.username = username;
         this.password = password;
         this.nickname = nickname;
@@ -29,12 +33,15 @@
         this.slogan = slogan;
         this.addUser();
     }
+
     public ArrayList<User> getAllUsers() {
         return allUsers;
     }
+
     public void addUser() {
         allUsers.add(this);
     }
+
     public void setRank(int rank) {
         this.rank = rank;
     }
@@ -43,72 +50,73 @@
         this.score = score;
     }
 
-    public String getUsername(){
+    public String getUsername() {
         return this.username;
     }
 
-    public String getPassword(){
+    public String getPassword() {
         return this.password;
     }
 
-    public String getNickname(){
+    public String getNickname() {
         return this.nickname;
     }
 
-    public String getEmail(){
+    public String getEmail() {
         return this.email;
     }
 
-    public String getSlogan(){
+    public String getSlogan() {
         return this.slogan;
     }
 
-    public int getRank(){
+    public int getRank() {
         return this.rank;
     }
 
-    public int getScore(){
+    public int getScore() {
         return this.score;
     }
 
-    public void setPassword(String password){
+    public void setPassword(String password) {
         this.password = password;
     }
 
-    public void setUsername(String username){
+    public void setUsername(String username) {
         this.username = username;
     }
 
-    public void setNickname(String nickname){
+    public void setNickname(String nickname) {
         this.nickname = nickname;
     }
 
-    public void setEmail(String email){
+    public void setEmail(String email) {
         this.email = email;
     }
 
-    public void setSlogan(String slogan){
+    public void setSlogan(String slogan) {
         this.slogan = slogan;
     }
 
-    public void setPassRecoveryQuestion(String passRecoveryQuestion){
+    public void setPassRecoveryQuestion(String passRecoveryQuestion) {
         this.passRecoveryQuestion = passRecoveryQuestion;
     }
 
-    public void setPassRecoveryAnswer(String passRecoveryAnswer){
+    public void setPassRecoveryAnswer(String passRecoveryAnswer) {
         this.passRecoveryAnswer = passRecoveryAnswer;
     }
 
-    public String getPassRecoveryQuestion(){
+    public String getPassRecoveryQuestion() {
         return this.passRecoveryQuestion;
     }
 
-    public String getPassRecoveryAnswer(){
+    public String getPassRecoveryAnswer() {
         return this.passRecoveryAnswer;
     }
 
+
     public static User findUserWithPass(String password) {
-        for (User user:User.allUsers) {
+        for (User user : User.allUsers) {
             if (user.getPassword().equals(password))
                 return user;
         }
Index: .idea/shelf/Uncommitted_changes_before_Merge_at________Changes_.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Merge_at________Changes_.xml b/.idea/shelf/Uncommitted_changes_before_Merge_at________Changes_.xml
new file mode 100644
--- /dev/null	(date 1682334826128)
+++ b/.idea/shelf/Uncommitted_changes_before_Merge_at________Changes_.xml	(date 1682334826128)
@@ -0,0 +1,4 @@
+<changelist name="Uncommitted_changes_before_Merge_at_۲۴_۰۴_۲۰۲۳_۰۱_۳۳_بعدازظهر_[Changes]" date="1682330628818" recycled="true" deleted="true">
+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Merge_at_۲۴_۰۴_۲۰۲۳_۰۱_۳۳_بعدازظهر_[Changes]/shelved.patch" />
+  <option name="DESCRIPTION" value="Uncommitted changes before Merge at ۲۴/۰۴/۲۰۲۳ ۰۱:۳۳ بعدازظهر [Changes]" />
+</changelist>
\ No newline at end of file
Index: project.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"JAVA_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\" inherit-compiler-output=\"true\">\r\n    <exclude-output />\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <sourceFolder url=\"file://$MODULE_DIR$/src\" isTestSource=\"false\" />\r\n    </content>\r\n    <orderEntry type=\"inheritedJdk\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/project.iml b/project.iml
--- a/project.iml	(revision 654ee3a971821e5edc158f9b7911dce66bfc5f52)
+++ b/project.iml	(date 1682334826130)
@@ -5,6 +5,11 @@
     <content url="file://$MODULE_DIR$">
       <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
     </content>
+    <dependency>
+            <groupId>org.passay</groupId>
+            <artifactId>passay</artifactId>
+            <version>1.3.1</version>
+    </dependency>
     <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
Index: src/main/java/org/example/controller/GovernmentController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/controller/GovernmentController.java b/src/main/java/org/example/controller/GovernmentController.java
new file mode 100644
--- /dev/null	(date 1682334826131)
+++ b/src/main/java/org/example/controller/GovernmentController.java	(date 1682334826131)
@@ -0,0 +1,4 @@
+package org.example.controller;
+
+public class governmentController {
+}
Index: .idea/shelf/Uncommitted_changes_before_Checkout_at________Changes_3.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at________Changes_3.xml b/.idea/shelf/Uncommitted_changes_before_Checkout_at________Changes_3.xml
new file mode 100644
--- /dev/null	(date 1682334826126)
+++ b/.idea/shelf/Uncommitted_changes_before_Checkout_at________Changes_3.xml	(date 1682334826126)
@@ -0,0 +1,4 @@
+<changelist name="Uncommitted_changes_before_Checkout_at_۲۴_۰۴_۲۰۲۳_۰۱_۲۹_بعدازظهر_[Changes]" date="1682330381205" recycled="false" toDelete="true">
+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_۲۴_۰۴_۲۰۲۳_۰۱_۲۹_بعدازظهر_[Changes]/shelved.patch" />
+  <option name="DESCRIPTION" value="Uncommitted changes before Checkout at ۲۴/۰۴/۲۰۲۳ ۰۱:۲۹ بعدازظهر [Changes]" />
+</changelist>
\ No newline at end of file
diff --git a/.idea/shelf/Uncommitted_changes_before_Checkout_at_۲۴_۰۴_۲۰۲۳_۰۱_۲۹_بعدازظهر_[Changes]1/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Checkout_at_۲۴_۰۴_۲۰۲۳_۰۱_۲۹_بعدازظهر_[Changes]1/shelved.patch
new file mode 100644
