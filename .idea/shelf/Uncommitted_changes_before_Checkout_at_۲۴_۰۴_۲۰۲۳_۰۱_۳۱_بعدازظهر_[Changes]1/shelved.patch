Index: src/main/java/org/example/view/mapMenu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.view;\r\n\r\nimport java.util.regex.Matcher;\r\n\r\npublic class mapMenu {\r\n    private void run(Matcher matcher)\r\n    {\r\n        //TODO\r\n        //\r\n        //TODO exit\r\n    }\r\n    private void showMap(int x,int y)\r\n    {\r\n\r\n    }\r\n\r\n        /*TODO map should be shown 10 up down left right\r\n        s : soldier\r\n        SG : small gatehouse\r\n        BG : big gatehouse\r\n        D : drawBridge\r\n        LT : lookoutTower\r\n        PT : perimeter tower\r\n\r\n/*\r\n\r\n\r\n\r\n        return null;\r\n    }\r\n    private map showDetails(int x ,int y)\r\n    {\r\n        // TODO : only a tile should be shown\r\n        return null;\r\n\r\n    }\r\n    // TODO : have a guide for map tiles\r\n\r\n    private void changeEnvironment(int x, int y)\r\n    {\r\n        //should check\r\n    }*/\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/view/mapMenu.java b/src/main/java/org/example/view/mapMenu.java
--- a/src/main/java/org/example/view/mapMenu.java	
+++ b/src/main/java/org/example/view/mapMenu.java	
@@ -1,15 +1,32 @@
 package org.example.view;
 
+import org.example.InputScanner;
+import org.example.view.enums.commands.mapMenuEnum;
+
 import java.util.regex.Matcher;
 
 public class mapMenu {
     private void run(Matcher matcher)
     {
+        String command;
+        InputScanner scanner = new InputScanner();
+        command = scanner.getScanner().nextLine();
+        while (true)
+        {
+            if(mapMenuEnum.getMatcher(command,mapMenuEnum.SHOW_MAP) != null)
+                showMap(Integer.parseInt(matcher.group("xCoordinate"))
+                        , Integer.parseInt(matcher.group("yCoordinate")));
+
+
+
+
+        }
+
         //TODO
         //
         //TODO exit
     }
-    private void showMap(int x,int y)
+    private static void showMap(int x,int y)
     {
 
     }
Index: src/main/java/org/example/controller/mapMenuController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.controller;\r\n\r\npublic class mapMenuController {\r\n\r\n    private void setTexture(int x , int y,String type)\r\n    {\r\n\r\n    }\r\n    private void setTexture(int x1, int y1,int x2, int y2,String type)\r\n    {\r\n\r\n    }\r\n    private void clear()\r\n    {\r\n\r\n    }\r\n    private void dropRock()\r\n    {\r\n    }\r\n    private void dropUnit(int x , int y, String type)\r\n    {\r\n\r\n    }\r\n    private void dropBuilding(int x , int y)\r\n    {\r\n\r\n    }\r\n    private void dropTree(int x , int y, String type)\r\n    {\r\n\r\n    }\r\n    private void dropRock(int x , int y , char direction)\r\n    {\r\n\r\n    }\r\n    private boolean checkLand(int x , int y)\r\n    {\r\n        return true;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/controller/mapMenuController.java b/src/main/java/org/example/controller/mapMenuController.java
--- a/src/main/java/org/example/controller/mapMenuController.java	
+++ b/src/main/java/org/example/controller/mapMenuController.java	
@@ -1,6 +1,22 @@
 package org.example.controller;
+import org.example.model.map;
+import org.example.model.tile;
 
 public class mapMenuController {
+    private void showMap(int x , int y)
+    {
+        tile currentTile = map.getCurrentMap()[x-1][y-1] ;
+        tile[][] mapToShow = new tile[10][10];
+
+
+    }
+
+    /*private String showDetails(int x , int y) {
+        if (map.getCurrentMap()[x - 1][y - 1].getBuilding() == null) {
+            // return map.findATile(x-1 , y-1).
+
+        }
+    }*/
 
     private void setTexture(int x , int y,String type)
     {
@@ -33,8 +49,8 @@
     {
 
     }
-    private boolean checkLand(int x , int y)
-    {
+    private boolean checkLand(int x , int y) {
         return true;
     }
 }
+
Index: src/main/java/org/example/view/ProfileMenu.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.view;\r\n\r\nimport org.example.controller.LoginMenuController;\r\nimport org.example.controller.ProfileMenuController;\r\n\r\nimport java.util.regex.Matcher;\r\n\r\npublic class ProfileMenu extends LoginMenu{\r\n    private final ProfileMenuController profileMenuController;\r\n    public ProfileMenu(LoginMenuController currentUserController) {\r\n        this.profileMenuController = (ProfileMenuController) currentUserController;\r\n    }\r\n    protected void changeUserUsername(Matcher matcher) {\r\n        String username = matcher.group(\"username\");\r\n        System.out.println(profileMenuController.changeUsername(username).getOutput());\r\n    }\r\n\r\n    protected void changeUserPassword(Matcher matcher) {\r\n        String oldPass = matcher.group(\"oldPass\");\r\n        String newPass = matcher.group(\"newPass\");\r\n        System.out.println(profileMenuController.changePassword(oldPass,newPass));\r\n    }\r\n    protected void changeUserNickname(Matcher matcher) {\r\n        String nickName = matcher.group(\"nickname\");\r\n        System.out.println(profileMenuController.changeNickname(nickName));\r\n    }\r\n    protected void changeUserEmail(Matcher matcher) {\r\n        String email = matcher.group(\"email\");\r\n        System.out.println(profileMenuController.changeEmail(email));\r\n    }\r\n    protected void changeUserSlogan(Matcher matcher) {\r\n        String slogan = matcher.group(\"slogan\");\r\n        System.out.println(profileMenuController.changeSlogan(slogan));\r\n    }\r\n\r\n    protected void removeUserSlogan() {\r\n        System.out.println(profileMenuController.removeSlogan());\r\n    }\r\n\r\n    protected void displayUserProfile() {\r\n        profileMenuController.showUserHighestScore();\r\n    }\r\n\r\n    protected void displayUserRank() {\r\n        profileMenuController.showUserRank();\r\n    }\r\n\r\n    protected void displayUserSlogan() {\r\n        profileMenuController.showUserSlogan();\r\n\r\n    }\r\n    protected void displayUserInfo() {\r\n        profileMenuController.showUserProfileDisplay();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/view/ProfileMenu.java b/src/main/java/org/example/view/ProfileMenu.java
--- a/src/main/java/org/example/view/ProfileMenu.java	
+++ b/src/main/java/org/example/view/ProfileMenu.java	
@@ -18,7 +18,7 @@
     protected void changeUserPassword(Matcher matcher) {
         String oldPass = matcher.group("oldPass");
         String newPass = matcher.group("newPass");
-        System.out.println(profileMenuController.changePassword(oldPass,newPass));
+        //System.out.println(profileMenuController.changePassword(oldPass,newPass));
     }
     protected void changeUserNickname(Matcher matcher) {
         String nickName = matcher.group("nickname");
@@ -33,9 +33,9 @@
         System.out.println(profileMenuController.changeSlogan(slogan));
     }
 
-    protected void removeUserSlogan() {
+   /* protected void removeUserSlogan() {
         System.out.println(profileMenuController.removeSlogan());
-    }
+    }*/
 
     protected void displayUserProfile() {
         profileMenuController.showUserHighestScore();
Index: src/main/java/org/example/model/gameData/map.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.model.gameData;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class map {\r\n    int height;\r\n    int weight;\r\n    tiles [][] currentMap = new tiles[200][200];\r\n\r\n    public tiles[][] getCurrentMap() {\r\n        return currentMap;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/model/gameData/map.java b/src/main/java/org/example/model/gameData/map.java
--- a/src/main/java/org/example/model/gameData/map.java	
+++ b/src/main/java/org/example/model/gameData/map.java	
@@ -2,12 +2,16 @@
 
 import java.util.ArrayList;
 
-public class map {
+public abstract class map {
     int height;
     int weight;
-    tiles [][] currentMap = new tiles[200][200];
+     public static tile [][] currentMap = new tile[200][200];
 
-    public tiles[][] getCurrentMap() {
+    public static tile[][] getCurrentMap() {
         return currentMap;
     }
+    public static tile findATile(int x , int y )
+    {
+         return currentMap[x-1][y-1];
+    }
 }
Index: src/main/java/org/example/model/building/Storage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.model.building;\r\n\r\nimport org.example.model.enums.Source;\r\npublic class Storage extends Building{\r\n    private int capacity;\r\n    private final Source sourceType;\r\n\r\n    public Storage(int hp, int width, int height, int buildingCost, int capacity, Source sourceType) {\r\n        super(hp, width, height, buildingCost);\r\n        this.capacity = capacity;\r\n        this.sourceType = sourceType;\r\n    }\r\n\r\n    public int showCapacity() {\r\n        return capacity;\r\n    }\r\n\r\n    public void changingCapacity(int capacity,int flag) {\r\n        if (flag==1) {\r\n            this.capacity+=capacity;\r\n            return;\r\n        }\r\n        this.capacity-=capacity;\r\n    }\r\n\r\n    public Source getSourceType() {\r\n        return sourceType;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/model/building/Storage.java b/src/main/java/org/example/model/building/Storage.java
--- a/src/main/java/org/example/model/building/Storage.java	
+++ b/src/main/java/org/example/model/building/Storage.java	
@@ -1,14 +1,16 @@
 package org.example.model.building;
 
 import org.example.model.enums.Source;
+import org.example.model.enums.products;
+
 public class Storage extends Building{
     private int capacity;
-    private final Source sourceType;
+    private final products good;
 
-    public Storage(int hp, int width, int height, int buildingCost, int capacity, Source sourceType) {
+    public Storage(int hp, int width, int height, int buildingCost, int capacity, products good) {
         super(hp, width, height, buildingCost);
         this.capacity = capacity;
-        this.sourceType = sourceType;
+        this.good = good;
     }
 
     public int showCapacity() {
@@ -23,7 +25,7 @@
         this.capacity-=capacity;
     }
 
-    public Source getSourceType() {
-        return sourceType;
+    public products getGood() {
+        return good;
     }
 }
Index: src/main/java/org/example/model/building/ProductiveBuilding.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.model.building;\r\n\r\nimport org.example.model.interfaces.produce;\r\nimport org.example.model.enums.Source;\r\n\r\npublic class ProductiveBuilding extends Building implements produce {\r\n    private final int rate;\r\n    private boolean needMaterial;\r\n    private final Source product;\r\n\r\n    public ProductiveBuilding(int hp, int width, int height, int buildingCost, int rate,boolean needMaterial, Source product) {\r\n        super(hp, width, height, buildingCost);\r\n        this.rate = rate;\r\n        this.needMaterial = needMaterial;\r\n        this.product = product;\r\n    }\r\n\r\n    public Source getProduct() {\r\n        return product;\r\n    }\r\n\r\n    public int getRate() {\r\n        return rate;\r\n    }\r\n    @Override\r\n    public void production() {\r\n        //TODO:\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/model/building/ProductiveBuilding.java b/src/main/java/org/example/model/building/ProductiveBuilding.java
--- a/src/main/java/org/example/model/building/ProductiveBuilding.java	
+++ b/src/main/java/org/example/model/building/ProductiveBuilding.java	
@@ -1,21 +1,22 @@
 package org.example.model.building;
 
+import org.example.model.enums.products;
 import org.example.model.interfaces.produce;
 import org.example.model.enums.Source;
 
 public class ProductiveBuilding extends Building implements produce {
     private final int rate;
     private boolean needMaterial;
-    private final Source product;
+    private final products product;
 
-    public ProductiveBuilding(int hp, int width, int height, int buildingCost, int rate,boolean needMaterial, Source product) {
+    public ProductiveBuilding(int hp, int width, int height, int buildingCost, int rate,boolean needMaterial, products product) {
         super(hp, width, height, buildingCost);
         this.rate = rate;
         this.needMaterial = needMaterial;
         this.product = product;
     }
 
-    public Source getProduct() {
+    public products getProduct() {
         return product;
     }
 
Index: src/main/java/org/example/controller/mapChangesMenuController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.controller;\r\n\r\npublic class mapChangesMenuController {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/controller/mapChangesMenuController.java b/src/main/java/org/example/controller/mapChangesMenuController.java
--- a/src/main/java/org/example/controller/mapChangesMenuController.java	
+++ b/src/main/java/org/example/controller/mapChangesMenuController.java	
@@ -1,4 +1,5 @@
 package org.example.controller;
 
 public class mapChangesMenuController {
+
 }
Index: src/main/java/org/example/model/building/Market.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.model.building;\r\n\r\nimport java.util.ArrayList;\r\nimport org.example.model.enums.*;\r\npublic class Market extends Building{\r\n    private ArrayList<Food> userFoods;\r\n    private ArrayList<Source> userSources;\r\n    private ArrayList<Weapon> userWeapons;\r\n\r\n    public Market(int hp, int width, int height, int buildingCost) {\r\n        super(hp, width, height, buildingCost);\r\n        this.userFoods = new ArrayList<>();\r\n        this.userSources = new ArrayList<>();\r\n        this.userWeapons = new ArrayList<>();\r\n    }\r\n\r\n    public ArrayList<Food> getUserFoods() {\r\n        return userFoods;\r\n    }\r\n\r\n    public ArrayList<Source> getUserSources() {\r\n        return userSources;\r\n    }\r\n\r\n    public ArrayList<Weapon> getUserWeapons() {\r\n        return userWeapons;\r\n    }\r\n\r\n    public void showUserFoodsAmount() {\r\n        System.out.println(getUserFoods().size());\r\n    }\r\n\r\n    public void showUsersourcesAmount() {\r\n        System.out.println(getUserSources().size());\r\n    }\r\n\r\n    public void showUserWeaponsAmount() {\r\n        System.out.println(getUserWeapons().size());\r\n    }\r\n\r\n    public void buyItem(String item) {\r\n        //TODO:\r\n    }\r\n\r\n    public void sellItem(String item) {\r\n        //TODO:\r\n    }\r\n\r\n    public void showStoreInventory() {\r\n        //TODO:\r\n        return;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/model/building/Market.java b/src/main/java/org/example/model/building/Market.java
--- a/src/main/java/org/example/model/building/Market.java	
+++ b/src/main/java/org/example/model/building/Market.java	
@@ -3,7 +3,7 @@
 import java.util.ArrayList;
 import org.example.model.enums.*;
 public class Market extends Building{
-    private ArrayList<Food> userFoods;
+    private ArrayList<products> userFoods;
     private ArrayList<Source> userSources;
     private ArrayList<Weapon> userWeapons;
 
@@ -14,7 +14,7 @@
         this.userWeapons = new ArrayList<>();
     }
 
-    public ArrayList<Food> getUserFoods() {
+    public ArrayList<products> getUserFoods() {
         return userFoods;
     }
 
Index: src/main/java/org/example/model/tile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/model/tile.java b/src/main/java/org/example/model/tile.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/org/example/model/tile.java	
@@ -0,0 +1,43 @@
+package org.example.model;
+
+import org.example.model.MBC.Soldier;
+import org.example.model.building.Building;
+
+public class tile {
+    private Building building = null;
+    private LandType landType;
+    private int numberOfSoldiers;
+    private Soldier soldier = null;
+
+    public void setBuilding(Building building) {
+        this.building = building;
+    }
+
+    public void setLandType(LandType landType) {
+        this.landType = landType;
+    }
+
+    public void addToNumberOfSoldiers(int numberOfSoldiers) {
+        this.numberOfSoldiers += numberOfSoldiers;
+    }
+
+    public void setSoldier(Soldier soldier) {
+        this.soldier = soldier;
+    }
+
+    public Building getBuilding() {
+        return building;
+    }
+
+    public LandType getLandType() {
+        return landType;
+    }
+
+    public int getNumberOfSoldiers() {
+        return numberOfSoldiers;
+    }
+
+    public Soldier getSoldier() {
+        return soldier;
+    }
+}
Index: src/main/java/org/example/model/building/CityBuilding.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.model.building;\r\n\r\n\r\npublic class CityBuilding extends Building{\r\n    private final int capacity;\r\n\r\n    public CityBuilding(int hp, int width, int height, int buildingCost, int capacity) {\r\n        super(hp, width, height, buildingCost);\r\n        this.capacity = capacity;\r\n    }\r\n\r\n    public int getCapacity() {\r\n        return capacity;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/model/building/CityBuilding.java b/src/main/java/org/example/model/building/CityBuilding.java
--- a/src/main/java/org/example/model/building/CityBuilding.java	
+++ b/src/main/java/org/example/model/building/CityBuilding.java	
@@ -2,14 +2,14 @@
 
 
 public class CityBuilding extends Building{
-    private final int capacity;
+    private final int peopleCapacity;
 
     public CityBuilding(int hp, int width, int height, int buildingCost, int capacity) {
         super(hp, width, height, buildingCost);
-        this.capacity = capacity;
+        this.peopleCapacity = capacity;
     }
 
     public int getCapacity() {
-        return capacity;
+        return peopleCapacity;
     }
 }
Index: src/main/java/org/example/model/enums/products.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/model/enums/products.java b/src/main/java/org/example/model/enums/products.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/org/example/model/enums/products.java	
@@ -0,0 +1,27 @@
+package org.example.model.enums;
+
+public enum products {
+    APPLE,
+    HOP,
+    BREAD,
+    MEAT,
+    WEAT,
+    BEER,
+    ARMOUR,
+    CHEESE,
+    FLOUR,
+    ROCK,
+    IRON,
+    PITCH,
+    WOOD,
+    VEST,
+    HORSE,
+    GOLD_COIN,
+    SWORD,
+    SPEAR,
+    ARCHE,
+    MACE,
+    OILPOT,
+
+    ;
+}
Index: src/main/java/org/example/model/building/Building.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.model.building;\r\n\r\n\r\nimport org.example.model.MBC.Person;\r\nimport org.example.model.tiles;\r\n\r\npublic class Building {\r\n    private final int hp;\r\n    private int width;\r\n    private int height;\r\n    private final int buildingCost;\r\n    private Person worker;\r\n\r\n    public Building(int hp, int width, int height, int buildingCost) {\r\n        this.hp = hp;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.buildingCost = buildingCost;\r\n    }\r\n\r\n    public int getHp() {\r\n        return hp;\r\n    }\r\n\r\n    public int getWidth() {\r\n        return width;\r\n    }\r\n\r\n    public int getHeight() {\r\n        return height;\r\n    }\r\n\r\n    public int getBuildingCost() {\r\n        return buildingCost;\r\n    }\r\n\r\n    public Person getWorker() {\r\n        return worker;\r\n    }\r\n\r\n    public void setPosition(int width,int height) {\r\n        this.height = height;\r\n        this.width = width;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/model/building/Building.java b/src/main/java/org/example/model/building/Building.java
--- a/src/main/java/org/example/model/building/Building.java	
+++ b/src/main/java/org/example/model/building/Building.java	
@@ -2,7 +2,7 @@
 
 
 import org.example.model.MBC.Person;
-import org.example.model.tiles;
+import org.example.model.tile;
 
 public class Building {
     private final int hp;
Index: src/main/java/org/example/model/building/buildingName.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/model/building/buildingName.java b/src/main/java/org/example/model/building/buildingName.java
new file mode 100644
--- /dev/null	
+++ b/src/main/java/org/example/model/building/buildingName.java	
@@ -0,0 +1,139 @@
+package org.example.model.building;
+
+import org.example.model.enums.Source;
+import org.example.model.enums.products;
+
+import static org.example.model.enums.products.*;
+
+public enum buildingName {
+    //TODO the rate & capacity & cost should be specified for each building
+    MILL(20, WOOD, 0, null, 1, null, FLOUR, 100),
+    IRON_MINE(20, WOOD, 0, null, 2, IRON, null, 100),
+    QUARRY(20, WOOD, 0, null, 3, ROCK, null, 100),
+    WOODCUTTER(3, WOOD, 0, null, 1, WOOD, null, 100),
+    APPLE_GARDEN(5, WOOD, 0, null, 1, APPLE, null, 100),
+    PITCH_RIG(20 , WOOD , 0 , null , 1 , PITCH , null , 100),
+    HOP_FARM(5, WOOD, 0, null, 1, HOP, null, 100),
+    HUNTING_BUILDING(5, WOOD, 0, null, 1, MEAT, null, 100),
+    WEAT_FARM(15, WOOD, 0, null, 1, WEAT, null, 100),
+    BAKERY(10, WOOD, 0, null, 1, BREAD, null, 100),
+    BEER_MAKING(10, WOOD, 0, null, 1, BEER, null, 100),
+    ARMOURER(100, GOLD_COIN, 20, WOOD, 1, ARMOUR, null, 100),
+    BLACKSMITH(100, GOLD_COIN, 20, WOOD, 1, SWORD, MACE, 100),
+    POLETURNER(100, GOLD_COIN, 20, WOOD, 1, SPEAR, null, 100),
+    FLETCHER(100, GOLD_COIN, 20, WOOD, 1, ARCHE, null, 100),
+    OIL_SMELTLER(10, IRON, 100, GOLD_COIN, 1, OILPOT, null, 100),
+    STABLE(20, WOOD, 400, GOLD_COIN, 0, HORSE, null, 100),
+    ARMOURY(5 , WOOD , 100 ),
+    OX_TETHER( 5 , WOOD , 0 , null ,  1 ),
+    BARRAK(10 , 0 , 15 , ROCK  , 0 , null),
+    ENGINEER_GUILD(10 , 20 , 10 , WOOD , 100 , GOLD_COIN  ),
+    MERCENARY_POST(10 , 0 , 10 , WOOD , 0 , null ),
+    STORE( 5, WOOD , 100 ),
+    FOODSTORE( 5 , WOOD , 100),
+    LOOKOUT_TOWER(100 , 100),
+    PERMETER_TOWER(100 , 100),
+    DEFEND_TURRET(100 , 100),
+    SQUARE_TOWER(100 , 100),
+    CIRCLE_TOWER(100 , 100),
+    SMALL_STONE_GATEHOUSE(0 , null , 8),
+    BIG_STONE_GATEHOUSE(20 , ROCK , 10),
+    HOUSE(6 , WOOD , 0 , null , 0),
+    INN( 5 , 20 , WOOD , 100 , GOLD_COIN ),
+    CHURCH(2 , 250 , GOLD_COIN , 0 , null ),
+    CATHERDAL(2 , 100 , GOLD_COIN , 0 , null),
+    KILLINGPIT( 10 ,6 , WOOD ),
+    CAGED_WAR_DOGS(10 , WOOD , 100 , GOLD_COIN , 0),
+    SIEGE_TENT(0, null , 0 , null , 1),
+    PITCH_DITCH( 2 , PITCH , 0 , null , 0),
+    DRAWBRIDGE(10 , WOOD , 0 , null , 0),
+
+
+
+    ;
+    private int numberOfMaterial1;
+    private int numberOfMaterial2;
+    private products material1Name;
+    private products material2Name;
+    private int numberOfMaterial;
+    private products materialName;
+    private int numberOfWorkers;
+    private products good1;
+    private products good2;
+    private int rate;
+    private int capacity;
+    private int fireRange;
+    private int defendRange;
+    private int popularityRate;
+    private int damage;
+    private int costForEachPerson;
+    private int costForEachPerson2;
+
+
+
+    //productive building
+    buildingName(int numberOfMaterial1, products material1Name, int numberOfMaterial2, products material2Name,
+                 int numberOfWorkers, products good1, products good2, int rate) {
+        this.numberOfMaterial1 = numberOfMaterial1;
+        this.material1Name = material1Name;
+        this.numberOfMaterial2 = numberOfMaterial2;
+        this.material2Name = material2Name;
+        this.numberOfWorkers = numberOfWorkers;
+        this.good1 = good1;
+        this.good2 = good2;
+        this.rate = rate;
+    }
+    //storage building
+    buildingName(int numberOfMaterial , products materialName , int capacity)
+    {
+        this.numberOfMaterial = numberOfMaterial ;
+        this.materialName = materialName ;
+        this.capacity = capacity ;
+
+    }
+    // war buildings
+    buildingName(int fireRange , int defendRange)
+    {
+        this.fireRange =  fireRange;
+        this.defendRange = defendRange;
+    }
+    //city buildings
+    buildingName(int popularityRate,int numberOfMaterial1, products material1Name , int numberOfMaterial2, products material2Name)
+    {
+        this.numberOfMaterial = numberOfMaterial1;
+        this.materialName = material1Name ;
+        this.popularityRate = popularityRate ;
+        this.numberOfMaterial2 = numberOfMaterial2 ;
+        this.material2Name = material2Name ;
+    }
+    buildingName(int damage , int numberOfMaterial , products materialName)
+    {
+        this.damage = damage;
+        this.numberOfMaterial = numberOfMaterial ;
+        this.materialName = materialName ;
+    }
+    buildingName(int numberOfMaterial1 , products material1Name , int numberOfMaterial2 , products material2Name, int numberOfWorkers)
+    {
+        this.numberOfMaterial1 = numberOfMaterial1 ;
+        this.material1Name = material1Name ;
+        this.numberOfMaterial2 = numberOfMaterial2 ;
+        this.material2Name = material2Name ;
+        this.numberOfMaterial2 = numberOfMaterial2 ;
+
+    }
+    //educations
+    buildingName(int costForEachPerson , int costForEachPerson2 , int numberOfMaterial1 , products material1Name,int numberOfMaterial2, products material2Name)
+    {
+        this.costForEachPerson = costForEachPerson;
+        this.costForEachPerson2 = costForEachPerson2 ;
+        this.numberOfMaterial1 = numberOfMaterial1;
+        this.material1Name = material1Name ;
+        this.numberOfMaterial2 = numberOfMaterial2 ;
+        this.material2Name = material2Name ;
+    }
+
+
+
+    }
+
+
